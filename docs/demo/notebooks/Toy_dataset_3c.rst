.. container:: cell code
   :name: 2eb555c2-8163-4fe3-8546-3454b651e865

   .. code:: python

      from symbolfit.symbolfit import *

   .. container:: output stream stdout

      ::

         Detected IPython. Loading juliacall extension. See https://juliapy.github.io/PythonCall.jl/stable/compat/#IPython

.. container:: cell markdown
   :name: 66906c16-9eb8-43ff-aa4d-29a5ea50d033

   .. rubric:: Dataset
      :name: dataset

.. container:: cell markdown
   :name: 1bbc1b76-6d40-48d4-9dde-6cb56052d1e0

   Five inputs are needed, which can be python lists or numpy arrays
   (more options will be added in future!):

   #. ``x``: independent variable (bin center location).
   #. ``y``: dependent variable.
   #. ``y_up``: upward uncertainty in y per bin.
   #. ``y_down``: downward uncertainty in y per bin.
   #. ``bin_edges_2d`` bin edges in x (2D).

   - Elements in both y_up and y_down should be non-negative values.
   - These values are the "delta" in y,

     - y + y_up = y shifted up by one standard deviation.
     - y - y_down = y shifted down by one standard deviation.

   - If no uncertainty in the dataset, one can set both y_up and y_down
     to ones with the same shape as y.

.. container:: cell code
   :name: 95ae43f4-d947-4c53-a133-73b163369e3d

   .. code:: python

      # each element contains bin centers [x0, x1]
      x = np.array([[-0.89473684, 0.075], [-0.68421053, 0.075], [-0.47368421, 0.075], [-0.26315789, 0.075], [-0.05263158, 0.075], [0.15789474, 0.075], [0.36842105, 0.075], [0.57894737, 0.075], [0.78947368, 0.075], [1.0, 0.075], [1.21052632, 0.075], [1.42105263, 0.075], [1.63157895, 0.075], [1.84210526, 0.075], [2.05263158, 0.075], [2.26315789, 0.075], [2.47368421, 0.075], [2.68421053, 0.075], [2.89473684, 0.075], [-0.89473684, 0.225], [-0.68421053, 0.225], [-0.47368421, 0.225], [-0.26315789, 0.225], [-0.05263158, 0.225], [0.15789474, 0.225], [0.36842105, 0.225], [0.57894737, 0.225], [0.78947368, 0.225], [1.0, 0.225], [1.21052632, 0.225], [1.42105263, 0.225], [1.63157895, 0.225], [1.84210526, 0.225], [2.05263158, 0.225], [2.26315789, 0.225], [2.47368421, 0.225], [2.68421053, 0.225], [2.89473684, 0.225], [-0.89473684, 0.35], [-0.68421053, 0.35], [-0.47368421, 0.35], [-0.26315789, 0.35], [-0.05263158, 0.35], [0.15789474, 0.35], [0.36842105, 0.35], [0.57894737, 0.35], [0.78947368, 0.35], [1.0, 0.35], [1.21052632, 0.35], [1.42105263, 0.35], [1.63157895, 0.35], [1.84210526, 0.35], [2.05263158, 0.35], [2.26315789, 0.35], [2.47368421, 0.35], [2.68421053, 0.35], [2.89473684, 0.35], [-0.89473684, 0.45], [-0.68421053, 0.45], [-0.47368421, 0.45], [-0.26315789, 0.45], [-0.05263158, 0.45], [0.15789474, 0.45], [0.36842105, 0.45], [0.57894737, 0.45], [0.78947368, 0.45], [1.0, 0.45], [1.21052632, 0.45], [1.42105263, 0.45], [1.63157895, 0.45], [1.84210526, 0.45], [2.05263158, 0.45], [2.26315789, 0.45], [2.47368421, 0.45], [2.68421053, 0.45], [2.89473684, 0.45], [-0.89473684, 0.55], [-0.68421053, 0.55], [-0.47368421, 0.55], [-0.26315789, 0.55], [-0.05263158, 0.55], [0.15789474, 0.55], [0.36842105, 0.55], [0.57894737, 0.55], [0.78947368, 0.55], [1.0, 0.55], [1.21052632, 0.55], [1.42105263, 0.55], [1.63157895, 0.55], [1.84210526, 0.55], [2.05263158, 0.55], [2.26315789, 0.55], [2.47368421, 0.55], [2.68421053, 0.55], [2.89473684, 0.55], [-0.89473684, 0.65], [-0.68421053, 0.65], [-0.47368421, 0.65], [-0.26315789, 0.65], [-0.05263158, 0.65], [0.15789474, 0.65], [0.36842105, 0.65], [0.57894737, 0.65], [0.78947368, 0.65], [1.0, 0.65], [1.21052632, 0.65], [1.42105263, 0.65], [1.63157895, 0.65], [1.84210526, 0.65], [2.05263158, 0.65], [2.26315789, 0.65], [2.47368421, 0.65], [2.68421053, 0.65], [2.89473684, 0.65], [-0.89473684, 0.75], [-0.68421053, 0.75], [-0.47368421, 0.75], [-0.26315789, 0.75], [-0.05263158, 0.75], [0.15789474, 0.75], [0.36842105, 0.75], [0.57894737, 0.75], [0.78947368, 0.75], [1.0, 0.75], [1.21052632, 0.75], [1.42105263, 0.75], [1.63157895, 0.75], [1.84210526, 0.75], [2.05263158, 0.75], [2.26315789, 0.75], [2.47368421, 0.75], [2.68421053, 0.75], [2.89473684, 0.75], [-0.89473684, 0.85], [-0.68421053, 0.85], [-0.47368421, 0.85], [-0.26315789, 0.85], [-0.05263158, 0.85], [0.15789474, 0.85], [0.36842105, 0.85], [0.57894737, 0.85], [0.78947368, 0.85], [1.0, 0.85], [1.21052632, 0.85], [1.42105263, 0.85], [1.63157895, 0.85], [1.84210526, 0.85], [2.05263158, 0.85], [2.26315789, 0.85], [2.47368421, 0.85], [2.68421053, 0.85], [2.89473684, 0.85], [-0.89473684, 0.95], [-0.68421053, 0.95], [-0.47368421, 0.95], [-0.26315789, 0.95], [-0.05263158, 0.95], [0.15789474, 0.95], [0.36842105, 0.95], [0.57894737, 0.95], [0.78947368, 0.95], [1.0, 0.95], [1.21052632, 0.95], [1.42105263, 0.95], [1.63157895, 0.95], [1.84210526, 0.95], [2.05263158, 0.95], [2.26315789, 0.95], [2.47368421, 0.95], [2.68421053, 0.95], [2.89473684, 0.95], [-0.89473684, 1.1], [-0.68421053, 1.1], [-0.47368421, 1.1], [-0.26315789, 1.1], [-0.05263158, 1.1], [0.15789474, 1.1], [0.36842105, 1.1], [0.57894737, 1.1], [0.78947368, 1.1], [1.0, 1.1], [1.21052632, 1.1], [1.42105263, 1.1], [1.63157895, 1.1], [1.84210526, 1.1], [2.05263158, 1.1], [2.26315789, 1.1], [2.47368421, 1.1], [2.68421053, 1.1], [2.89473684, 1.1], [-0.89473684, 1.3], [-0.68421053, 1.3], [-0.47368421, 1.3], [-0.26315789, 1.3], [-0.05263158, 1.3], [0.15789474, 1.3], [0.36842105, 1.3], [0.57894737, 1.3], [0.78947368, 1.3], [1.0, 1.3], [1.21052632, 1.3], [1.42105263, 1.3], [1.63157895, 1.3], [1.84210526, 1.3], [2.05263158, 1.3], [2.26315789, 1.3], [2.47368421, 1.3], [2.68421053, 1.3], [2.89473684, 1.3], [-0.89473684, 1.5], [-0.68421053, 1.5], [-0.47368421, 1.5], [-0.26315789, 1.5], [-0.05263158, 1.5], [0.15789474, 1.5], [0.36842105, 1.5], [0.57894737, 1.5], [0.78947368, 1.5], [1.0, 1.5], [1.21052632, 1.5], [1.42105263, 1.5], [1.63157895, 1.5], [1.84210526, 1.5], [2.05263158, 1.5], [2.26315789, 1.5], [2.47368421, 1.5], [2.68421053, 1.5], [2.89473684, 1.5]])
        
      bin_edges_2d = [
      # bin edges for x0, including both the leftmost and rightmost bin edge locations
      [-1.0, -0.78947368, -0.57894737, -0.36842105, -0.15789474, 0.05263158, 0.26315789, 0.47368421, 0.68421053, 0.89473684, 1.10526316, 1.31578947, 1.52631579, 1.73684211, 1.94736842, 2.15789474, 2.36842105, 2.57894737, 2.78947368, 3.0],
      # bin edges for x1, including both the leftmost and rightmost bin edge locations
      [0, 0.15, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.2, 1.4, 1.6]
      ]

      # bin content in the same order as x
      y=np.array([5.80841135, 5.66442451, 5.67092581, 5.99946465, 6.72334223, 11.8839351, 11.70210389, 10.83160653, 11.05671041, 11.65505484, 11.74977073, 11.37863092, 11.04891891, 10.54443351, 9.85884817, 9.26198068, 9.08346238, 9.01124884, 8.67448045, 5.51642995, 5.7399991, 5.86204003, 5.60075074, 7.12460168, 10.45591606, 11.34577307, 11.83253602, 11.80115663, 11.92143126, 11.98332533, 11.25828175, 11.13023136, 11.0448041, 10.32717692, 9.87007297, 10.33007073, 9.47437583, 9.33825107, 5.87552528, 5.87226917, 5.72407392, 5.99459365, 7.21075706, 9.57999944, 11.14630517, 11.6052531, 12.20383696, 11.33453781, 11.80621707, 11.31355362, 11.04485278, 11.31490029, 10.68133191, 10.18161626, 10.05683147, 9.85443861, 9.52620355, 5.82147825, 5.80449118, 5.63844187, 6.48911637, 7.60877817, 8.87604788, 10.79030596, 11.25448546, 11.73984289, 11.54042128, 11.53108651, 11.77014235, 11.33396207, 11.07519537, 11.19571342, 10.9709825, 10.52073887, 10.78998701, 10.24676479, 5.40030606, 5.97796282, 6.25649514, 6.58593961, 7.12571107, 8.93839847, 10.54214421, 10.91076023, 11.48655234, 11.72277884, 11.36044296, 11.5814517, 10.81553606, 11.37393839, 11.51261109, 11.10538056, 11.53835619, 10.83521735, 10.79516764, 5.76103808, 6.05957763, 5.73345161, 6.93045976, 7.70874758, 8.68025502, 9.90211269, 10.67858906, 10.98456766, 11.24592033, 11.52426219, 11.6804926, 11.73968818, 12.05440218, 11.51011004, 12.15144204, 11.33511877, 11.42029543, 11.62863775, 5.82309015, 5.70233518, 6.18687988, 6.86941477, 7.44651824, 8.77611487, 9.4621706, 9.94369755, 11.03747666, 11.36118742, 11.7133363, 11.79463553, 11.45248231, 11.48968055, 11.92679536, 11.79350837, 11.64662208, 11.66921516, 11.88779862, 5.96080281, 6.19532031, 6.66100621, 7.11673085, 7.93906306, 8.65205942, 9.0672692, 9.90619603, 10.58915112, 11.20612733, 11.41915251, 11.76774314, 11.7698089, 11.64708833, 11.57544731, 11.071521, 11.27764519, 10.06558254, 9.83321735, 6.74386781, 6.85226433, 6.75876726, 7.52738693, 7.76740625, 8.0921833, 9.00932201, 9.41135028, 10.49111133, 10.82817243, 11.18615416, 11.60584065, 11.85012171, 11.21194604, 10.73622112, 10.16814234, 9.25557285, 8.08406331, 7.23654642, 7.16990421, 6.8930864, 7.11595218, 7.394774, 7.86296989, 8.23172581, 8.99027074, 9.20180569, 9.92003726, 10.63651025, 11.13158267, 11.4975352, 11.40471321, 10.91301231, 9.16523291, 7.73576722, 6.79121611, 5.88174515, 5.8742713, 7.74862464, 7.34760779, 7.53062726, 7.71586872, 7.9387384, 7.97935795, 8.36479935, 8.80446465, 9.61325079, 10.36513735, 11.51424305, 11.61080369, 11.54216016, 9.31600183, 7.45511379, 5.79114212, 5.62415307, 5.57120758, 5.37471341, 7.72439334, 7.61811624, 7.7787156, 7.86881202, 8.33080852, 8.17588793, 8.18102946, 8.44622712, 9.16084102, 9.62534026, 11.19359533, 11.91121198, 10.74212391, 7.51410687, 6.1778789, 5.74659241, 6.01959324, 5.11988353, 5.63018625])

      y_up=np.array([0.58084114, 0.56644245, 0.56709258, 0.59994646, 0.67233422, 1.18839351, 1.17021039, 1.08316065, 1.10567104, 1.16550548, 1.17497707, 1.13786309, 1.10489189, 1.05444335, 0.98588482, 0.92619807, 0.90834624, 0.90112488, 0.86744805, 0.55164299, 0.57399991, 0.586204, 0.56007507, 0.71246017, 1.04559161, 1.13457731, 1.1832536, 1.18011566, 1.19214313, 1.19833253, 1.12582818, 1.11302314, 1.10448041, 1.03271769, 0.9870073, 1.03300707, 0.94743758, 0.93382511, 0.58755253, 0.58722692, 0.57240739, 0.59945936, 0.72107571, 0.95799994, 1.11463052, 1.16052531, 1.2203837, 1.13345378, 1.18062171, 1.13135536, 1.10448528, 1.13149003, 1.06813319, 1.01816163, 1.00568315, 0.98544386, 0.95262036, 0.58214782, 0.58044912, 0.56384419, 0.64891164, 0.76087782, 0.88760479, 1.0790306, 1.12544855, 1.17398429, 1.15404213, 1.15310865, 1.17701424, 1.13339621, 1.10751954, 1.11957134, 1.09709825, 1.05207389, 1.0789987, 1.02467648, 0.54003061, 0.59779628, 0.62564951, 0.65859396, 0.71257111, 0.89383985, 1.05421442, 1.09107602, 1.14865523, 1.17227788, 1.1360443, 1.15814517, 1.08155361, 1.13739384, 1.15126111, 1.11053806, 1.15383562, 1.08352173, 1.07951676, 0.57610381, 0.60595776, 0.57334516, 0.69304598, 0.77087476, 0.8680255, 0.99021127, 1.06785891, 1.09845677, 1.12459203, 1.15242622, 1.16804926, 1.17396882, 1.20544022, 1.151011, 1.2151442, 1.13351188, 1.14202954, 1.16286378, 0.58230901, 0.57023352, 0.61868799, 0.68694148, 0.74465182, 0.87761149, 0.94621706, 0.99436975, 1.10374767, 1.13611874, 1.17133363, 1.17946355, 1.14524823, 1.14896806, 1.19267954, 1.17935084, 1.16466221, 1.16692152, 1.18877986, 0.59608028, 0.61953203, 0.66610062, 0.71167308, 0.79390631, 0.86520594, 0.90672692, 0.9906196, 1.05891511, 1.12061273, 1.14191525, 1.17677431, 1.17698089, 1.16470883, 1.15754473, 1.1071521, 1.12776452, 1.00655825, 0.98332174, 0.67438678, 0.68522643, 0.67587673, 0.75273869, 0.77674062, 0.80921833, 0.9009322, 0.94113503, 1.04911113, 1.08281724, 1.11861542, 1.16058406, 1.18501217, 1.1211946, 1.07362211, 1.01681423, 0.92555728, 0.80840633, 0.72365464, 0.71699042, 0.68930864, 0.71159522, 0.7394774, 0.78629699, 0.82317258, 0.89902707, 0.92018057, 0.99200373, 1.06365103, 1.11315827, 1.14975352, 1.14047132, 1.09130123, 0.91652329, 0.77357672, 0.67912161, 0.58817452, 0.58742713, 0.77486246, 0.73476078, 0.75306273, 0.77158687, 0.79387384, 0.7979358, 0.83647994, 0.88044646, 0.96132508, 1.03651373, 1.15142431, 1.16108037, 1.15421602, 0.93160018, 0.74551138, 0.57911421, 0.56241531, 0.55712076, 0.53747134, 0.77243933, 0.76181162, 0.77787156, 0.7868812, 0.83308085, 0.81758879, 0.81810295, 0.84462271, 0.9160841, 0.96253403, 1.11935953, 1.1911212, 1.07421239, 0.75141069, 0.61778789, 0.57465924, 0.60195932, 0.51198835, 0.56301862])

      y_down=np.array([0.58084114, 0.56644245, 0.56709258, 0.59994646, 0.67233422, 1.18839351, 1.17021039, 1.08316065, 1.10567104, 1.16550548, 1.17497707, 1.13786309, 1.10489189, 1.05444335, 0.98588482, 0.92619807, 0.90834624, 0.90112488, 0.86744805, 0.55164299, 0.57399991, 0.586204, 0.56007507, 0.71246017, 1.04559161, 1.13457731, 1.1832536, 1.18011566, 1.19214313, 1.19833253, 1.12582818, 1.11302314, 1.10448041, 1.03271769, 0.9870073, 1.03300707, 0.94743758, 0.93382511, 0.58755253, 0.58722692, 0.57240739, 0.59945936, 0.72107571, 0.95799994, 1.11463052, 1.16052531, 1.2203837, 1.13345378, 1.18062171, 1.13135536, 1.10448528, 1.13149003, 1.06813319, 1.01816163, 1.00568315, 0.98544386, 0.95262036, 0.58214782, 0.58044912, 0.56384419, 0.64891164, 0.76087782, 0.88760479, 1.0790306, 1.12544855, 1.17398429, 1.15404213, 1.15310865, 1.17701424, 1.13339621, 1.10751954, 1.11957134, 1.09709825, 1.05207389, 1.0789987, 1.02467648, 0.54003061, 0.59779628, 0.62564951, 0.65859396, 0.71257111, 0.89383985, 1.05421442, 1.09107602, 1.14865523, 1.17227788, 1.1360443, 1.15814517, 1.08155361, 1.13739384, 1.15126111, 1.11053806, 1.15383562, 1.08352173, 1.07951676, 0.57610381, 0.60595776, 0.57334516, 0.69304598, 0.77087476, 0.8680255, 0.99021127, 1.06785891, 1.09845677, 1.12459203, 1.15242622, 1.16804926, 1.17396882, 1.20544022, 1.151011, 1.2151442, 1.13351188, 1.14202954, 1.16286378, 0.58230901, 0.57023352, 0.61868799, 0.68694148, 0.74465182, 0.87761149, 0.94621706, 0.99436975, 1.10374767, 1.13611874, 1.17133363, 1.17946355, 1.14524823, 1.14896806, 1.19267954, 1.17935084, 1.16466221, 1.16692152, 1.18877986, 0.59608028, 0.61953203, 0.66610062, 0.71167308, 0.79390631, 0.86520594, 0.90672692, 0.9906196, 1.05891511, 1.12061273, 1.14191525, 1.17677431, 1.17698089, 1.16470883, 1.15754473, 1.1071521, 1.12776452, 1.00655825, 0.98332174, 0.67438678, 0.68522643, 0.67587673, 0.75273869, 0.77674062, 0.80921833, 0.9009322, 0.94113503, 1.04911113, 1.08281724, 1.11861542, 1.16058406, 1.18501217, 1.1211946, 1.07362211, 1.01681423, 0.92555728, 0.80840633, 0.72365464, 0.71699042, 0.68930864, 0.71159522, 0.7394774, 0.78629699, 0.82317258, 0.89902707, 0.92018057, 0.99200373, 1.06365103, 1.11315827, 1.14975352, 1.14047132, 1.09130123, 0.91652329, 0.77357672, 0.67912161, 0.58817452, 0.58742713, 0.77486246, 0.73476078, 0.75306273, 0.77158687, 0.79387384, 0.7979358, 0.83647994, 0.88044646, 0.96132508, 1.03651373, 1.15142431, 1.16108037, 1.15421602, 0.93160018, 0.74551138, 0.57911421, 0.56241531, 0.55712076, 0.53747134, 0.77243933, 0.76181162, 0.77787156, 0.7868812, 0.83308085, 0.81758879, 0.81810295, 0.84462271, 0.9160841, 0.96253403, 1.11935953, 1.1911212, 1.07421239, 0.75141069, 0.61778789, 0.57465924, 0.60195932, 0.51198835, 0.56301862])

.. container:: cell markdown
   :name: 2c819ddd-a45e-4bb9-915e-19718576b0eb

   Plot the dataset to see what we will be fitting to:

.. container:: cell code
   :name: ee24eb08-6d27-49ec-8221-383219ae5229

   .. code:: python

      x0_bins = np.reshape(np.array(bin_edges_2d[0]), (-1))
      x1_bins = np.reshape(np.array(bin_edges_2d[1]), (-1))

      fig, axes = plt.subplots(figsize=(6,4))
      fig_ax = axes.hist2d(x[:,0], x[:,1],
                           bins = [x0_bins, x1_bins],
                           weights = np.squeeze(y),
                           cmap = 'Greens',
                           edgecolor = 'none'
                           )

      cbar_data = plt.colorbar(fig_ax[3], ax=axes, pad=0)

      plt.xlabel('x0', fontsize=15)
      plt.ylabel('x1', fontsize=15)
      plt.savefig('img/toy3c/dataset.png')

   .. container:: output display_data

      .. image:: notebooks/img/toy3c/dataset.png

.. container:: cell markdown
   :name: 8c27af64-6c06-40b7-97ca-8b55d8fab279

   .. rubric:: Configure the fit
      :name: configure-the-fit

.. container:: cell markdown
   :name: 28c4e18d-adc4-4f41-bace-96138f09a128

   Configure PySR to define the function space being searched for with
   symbolic regression:

.. container:: cell code
   :name: f3415459-b989-4cbe-8472-3fe2ae77f9be

   .. code:: python

      from pysr import PySRRegressor
      import sympy

      pysr_config = PySRRegressor(
          model_selection = 'accuracy',
          niterations = 200,
          maxsize = 60,
          binary_operators = [
              '+', '*'
                           ],
          unary_operators = [
              'exp',
              'gauss(x) = exp(-x*x)',
              'tanh',
          ],
          nested_constraints = {
              'tanh':   {'tanh': 0, 'exp': 0, 'gauss': 0, '*': 2},
              'exp':    {'tanh': 0, 'exp': 0, 'gauss': 0, '*': 2},
              'gauss':  {'tanh': 0, 'exp': 0, 'gauss': 0, '*': 2},
              '*':      {'tanh': 1, 'exp': 1, 'gauss': 1, '*': 2},
          },
          extra_sympy_mappings={
              'gauss': lambda x: sympy.exp(-x*x),
                               },
          loss='loss(y, y_pred, weights) = (y - y_pred)^2 * weights',
      )

.. container:: cell markdown
   :name: ed837443-a0fc-4227-9ea9-350c898a96b2

   Here, we allow two binary operators (+, \*) and three unary operators
   (exp, gauss, tanh) when searching for functional forms. The
   custom-defined gauss is there because this dataset has a peak. One
   can define any other function they want for their shapes.

   Nested constraints are imposed to prohibit, e.g., exp(exp(x))...

   Loss function is a weighted MSE, where the weight is the sqaured
   uncertainty by default in SymbolFit.

   For PySR options, please see:

   - https://github.com/MilesCranmer/PySR
   - https://astroautomata.com/PySR/

.. container:: cell markdown
   :name: c904493f-a36c-4b84-bc09-5fdad6e0f6d3

   Configure SymbolFit with the PySR config and for the re-optimization
   process:

.. container:: cell code
   :name: a61d9307-8b17-42dc-9915-3a4d0f7d1c51

   .. code:: python

      model = SymbolFit(
              # Dataset: x, y, y_up, y_down.
          	x = x,
          	y = y,
          	y_up = y_up,
          	y_down = y_down,
          
              # PySR configuration of the function space.
          	pysr_config = pysr_config,
          
              # Constrain the maximum function size and over-write maxsize in pysr_config.
              # Set a higher value for more complex shape, or when the lower one does not fit well.
          	max_complexity = 60,
          
              # Whether to scale input x to be within 0 and 1 for the fits for numerical stability,
              # as large x could lead to overflow when there is e.g. exp(x) -> exp(10000).
              # So set this to False when your x's are or close to O(1), otherwise recommended to set True.
              # After the fits, the functions will be unscaled to relect the original dataset.
          	input_rescale = False,
              # ^ no scaling needed here since the input x is O(1).
          
              # Whether to scale y for the fits for numerical stability,
              # options are (when input_rescale is True): None / 'mean' / 'max' / 'l2'.
              # This is useful to stabilize fits when your y's are very large or very small.
              # After the fits, the functions will be unscaled to relect the original dataset.
          	scale_y_by = None,
              # ^ no scaling needed here since the input y is O(1).
          
              # Set a maximum standard error (%) for all parameters to avoid bad fits during re-optimization.
              # In the refit loop, when any of the parameters returns a standard error larger than max_stderr,
              # the fit is considered failed, and the fit will retry itself for fewer or other combination of varying parameters,
              # by freezing some of the parameters to their initial values and kept fixed during re-optimization.
              # This is to avoid bad fits when the objective is too complex to minimize, which could cause some parameters
              # to have unrealistically large standard errors.
              # In most cases 10 < max_stderr < 100 suffices.
          	max_stderr = 20,
          
              # Consider y_up and y_down to weight the MSE loss during SR search and re-optimization.
          	fit_y_unc = True,
          
              # Set a random seed for returning the same batch of functional forms every time (single-threaded),
              # otherwise set None to explore more functions every time (multi-threaded and faster).
              # In most cases the function space is huge, one can retry the fits with the exact same fit configuration
              # and get completely different sets of candidate functions, merely by using different random seeds.
              # So if the candidate functions are not satisfactory this time, rerun it few times more with
              # random_seed = None or a different seed each time.
          	random_seed = None,
          
              # Custome loss weight to set "(y - y_pred)^2 * loss_weights", overwriting that with y_up and y_down.
          	loss_weights = None
      )

.. container:: cell markdown
   :name: 150c9085-9eea-4fe4-9b3c-3ab1b2d727f9

   .. rubric:: Symbol Fit it!
      :name: symbol-fit-it

.. container:: cell markdown
   :name: 31867aec-575b-40fe-aa4f-7e4b6ebeffc3

   Run the fits: SR fit for functional form searching ->
   parameterization -> re-optimization fit for improved best-fits and
   uncertainty estimation -> evaluation.

.. container:: cell code
   :name: 473996da-005b-451c-a452-c1449fa8ca04

   .. code:: python

      model.fit()

   .. container:: output stream stdout

      ::

         Compiling Julia backend...

   .. container:: output stream stderr

      ::

         [ Info: Started!

   .. container:: output stream stdout

      ::


         Expressions evaluated per second: 2.500e+05
         Head worker occupation: 22.9%
         Progress: 539 / 3000 total iterations (17.967%)
         ====================================================================================================
         Hall of Fame:
         ---------------------------------------------------------------------------------------------------
         Complexity  Loss       Score     Equation
         2           1.353e+01  7.971e+00  y = exp(1.6449)
         3           6.523e+00  7.294e-01  y = 6.173 + 0.68568
         4           4.965e+00  2.729e-01  y = 7.1069 + tanh(6.2684)
         5           3.787e+00  2.709e-01  y = exp(2.0116) + tanh(x₀)
         7           3.512e+00  3.767e-02  y = tanh(1.6926 * x₀) + exp(2.0116)
         8           2.958e+00  1.716e-01  y = (gauss(x₁ * x₁) * x₀) + 7.797
         10          2.169e+00  1.551e-01  y = (5.8715 + (gauss(-1.1066 + x₀) * 4.5936)) + 0.76196
         11          1.904e+00  1.303e-01  y = ((4.5041 * gauss(-1.2574 + x₀)) + 6.173) + gauss(x₁)
         12          1.889e+00  7.988e-03  y = (exp(1.93) + (3.6208 * gauss(x₀ + -1.2023))) + tanh(x₀)
         13          1.170e+00  4.794e-01  y = ((4.5041 * gauss(-1.1066 + x₀)) + 6.173) + (x₀ * gauss(x₁)...
                                           )
         15          1.067e+00  4.596e-02  y = ((4.5041 * gauss(x₀ + -1.2574)) + 6.173) + (x₀ * gauss(x₁ ...
                                           * x₁))
         17          8.907e-01  9.026e-02  y = ((4.5041 * gauss(x₀ + -1.2574)) + 6.173) + ((x₁ + x₀) * ga...
                                           uss(x₁ * x₁))
         18          6.441e-01  3.241e-01  y = ((tanh((2.5956 * x₀) + ((x₀ * x₀) * (x₁ * -1.0315))) + 3.1...
                                           315) * 2.5437) + 0.44388
         19          6.139e-01  4.806e-02  y = tanh(x₁) + (2.6029 * (2.9927 + tanh((2.4238 * x₀) + ((x₀ *...
                                            x₀) * (-0.97231 * x₁)))))
         20          5.521e-01  1.060e-01  y = (2.8417 * (tanh((((x₀ * x₀) + 0.79465) * (-0.99131 * x₁)) ...
                                           + (2.701 * x₀)) + 2.8233)) + x₁
         22          5.374e-01  1.348e-02  y = (((tanh(((-1.0977 * x₁) * ((x₀ * x₀) + 0.59905)) + (2.971 ...
                                           * x₀)) + 3.1724) * 2.5698) + x₁) + -0.19886
         23          4.388e-01  2.028e-01  y = ((2.8072 * (2.7683 + tanh((3.1501 * x₀) + (((x₀ * x₀) + 1....
                                           0105) * (x₁ * -1.0856))))) + x₁) + gauss(x₀)
         25          3.811e-01  7.047e-02  y = (x₁ + (2.8057 * (2.7241 + tanh((((x₀ * x₀) + 1.0778) * (-1...
                                           .383 * x₁)) + ((3.0596 + x₁) * x₀))))) + gauss(x₀)
         28          3.417e-01  3.641e-02  y = (((3.1416 + 0.31494) + (-0.24525 * x₀)) * (tanh(((0.79544 ...
                                           + (x₀ * x₀)) * (-0.92883 * x₁)) + ((2.7829 * x₀) + -0.20338)) ...
                                           + 2.5393)) + x₁
         30          3.066e-01  5.412e-02  y = (x₁ + ((3.1239 * (2.5692 + tanh(((-0.91637 * x₁) * (1.1925...
                                            + (x₀ * x₀))) + (2.7084 * x₀)))) + x₁)) + (-0.17352 * ((x₀ * ...
                                           x₀) + x₀))
         35          2.945e-01  8.036e-03  y = ((gauss(0.54484) * (x₁ + 0.18732)) + ((3.1239 * (2.5692 + ...
                                           tanh(((-0.91637 * x₁) * (1.1925 + (x₀ * x₀))) + (2.7084 * x₀))...
                                           )) + x₁)) + (-0.17352 * ((x₀ * x₀) + x₀))
         36          2.941e-01  1.333e-03  y = ((gauss(0.54484) * (x₁ + 0.18732)) + ((3.1239 * (2.5692 + ...
                                           tanh(((-0.91637 * x₁) * (1.1925 + (x₀ * x₀))) + (2.7084 * x₀))...
                                           )) + x₁)) + (tanh(-0.17352) * ((x₀ * x₀) + x₀))
         44          2.836e-01  4.554e-03  y = ((-0.7183 * (tanh(x₀) * 1.0077)) * x₀) + ((x₁ + (((2.825 +...
                                            -0.20975) + tanh((((x₀ * 2.9798) * 0.86435) + ((x₁ * -0.84581...
                                           ) * (((x₀ * x₀) + x₁) + 1.4129))) + (x₁ * x₁))) * 3.1813)) + t...
                                           anh(0.10538 + x₁))
         46          2.484e-01  6.634e-02  y = (gauss((-2.0657 * 1.2018) + (((x₀ + -0.65679) * x₁) * 1.92...
                                           27)) * (1.052 + x₁)) + ((exp(((x₁ * -0.69924) + 1.052) + x₁) *...
                                            gauss(x₀ + -1.1609)) + (exp(1.93) + (tanh((x₀ + x₀) + ((-2.02...
                                           95 * x₁) * x₀)) * 2.254)))
         49          2.445e-01  5.227e-03  y = (gauss((-2.0657 * 1.2018) + (((x₀ + -0.65679) * x₁) * 1.92...
                                           27)) * ((0.8004 + gauss(x₁)) + x₁)) + ((exp(((x₁ * -0.69924) +...
                                            1.052) + x₁) * gauss(x₀ + -1.1609)) + (exp(1.93) + (tanh((x₀ ...
                                           + x₀) + ((-2.0295 * x₁) * x₀)) * 2.254)))
         51          2.435e-01  1.992e-03  y = (gauss((-2.0657 * 1.2018) + (((x₀ + -0.65679) * x₁) * 1.92...
                                           27)) * ((0.8004 + 0.89433) + (gauss(0.79749) * x₁))) + ((exp((...
                                           (x₁ * -0.69924) + 1.052) + x₁) * gauss(x₀ + -1.1609)) + (exp(1...
                                           .93) + (tanh((x₀ + x₀) + ((-2.0295 * x₁) * x₀)) * 2.254)))
         57          2.386e-01  3.427e-03  y = (gauss((-2.0657 * 1.2018) + (((-0.65679 + x₀) * x₁) * 1.92...
                                           27)) * (((1.93 * (gauss(x₁) + gauss(-0.29391))) * gauss(0.8071...
                                           )) + x₁)) + ((exp(1.93) + (tanh((x₀ + x₀) + ((-2.0295 * x₁) * ...
                                           x₀)) * (2.254 + -0.19701))) + (exp(((x₁ * -0.69924) + 1.052) +...
                                            x₁) * gauss(x₀ + -1.1609)))
         ---------------------------------------------------------------------------------------------------
         ====================================================================================================
         Press 'q' and then <enter> to stop execution early.

         Expressions evaluated per second: 2.510e+05
         Head worker occupation: 23.5%
         Progress: 1109 / 3000 total iterations (36.967%)
         ====================================================================================================
         Hall of Fame:
         ---------------------------------------------------------------------------------------------------
         Complexity  Loss       Score     Equation
         2           1.353e+01  7.971e+00  y = exp(1.6449)
         3           5.013e+00  9.927e-01  y = x₀ + 6.5441
         4           4.965e+00  9.707e-03  y = 7.1069 + tanh(6.2684)
         5           3.787e+00  2.709e-01  y = exp(2.0116) + tanh(x₀)
         6           3.676e+00  2.964e-02  y = (3.2711 * 2.4559) + tanh(x₀)
         7           3.512e+00  4.570e-02  y = tanh(1.6926 * x₀) + exp(2.0116)
         8           2.958e+00  1.716e-01  y = (gauss(x₁ * x₁) * x₀) + 7.797
         10          2.041e+00  1.855e-01  y = (6.173 + (4.5041 * gauss(x₀ + -1.2574))) + 0.69055
         11          1.892e+00  7.618e-02  y = ((gauss(x₀ + -1.1108) * 4.5041) + 6.173) + tanh(x₀)
         12          1.889e+00  1.308e-03  y = (exp(1.93) + (3.6208 * gauss(x₀ + -1.2023))) + tanh(x₀)
         13          1.170e+00  4.795e-01  y = ((4.5041 * gauss(-1.0916 + x₀)) + 6.173) + (x₀ * gauss(x₁)...
                                           )
         15          9.373e-01  1.107e-01  y = ((4.5041 * gauss(-1.0916 + x₀)) + 6.173) + (x₀ * gauss(x₁ ...
                                           * x₁))
         17          7.979e-01  8.055e-02  y = ((gauss(-1.1108 + x₀) * 4.5041) + 6.173) + ((x₀ + x₁) * ga...
                                           uss(x₁ * x₁))
         18          6.367e-01  2.257e-01  y = (2.4684 * (3.2169 + tanh(((-1.1112 * x₁) * (x₀ * x₀)) + (2...
                                           .8293 * x₀)))) + 0.39738
         19          6.139e-01  3.645e-02  y = tanh(x₁) + (2.6029 * (2.9927 + tanh((2.4238 * x₀) + ((x₀ *...
                                            x₀) * (-0.97231 * x₁)))))
         20          5.387e-01  1.306e-01  y = (2.8417 * (tanh((((x₀ * x₀) + 0.67247) * (-0.99131 * x₁)) ...
                                           + (2.701 * x₀)) + 2.8233)) + x₁
         22          5.316e-01  6.647e-03  y = (x₁ + (2.7429 * (tanh((((x₀ * x₀) + 0.59736) * (x₁ * -0.94...
                                           894)) + (x₀ * 2.5483)) + 2.8714))) + 0.10749
         23          4.260e-01  2.214e-01  y = ((2.7683 * (2.7683 + tanh((3.1501 * x₀) + (((x₀ * x₀) + 1....
                                           0105) * (x₁ * -1.0856))))) + x₁) + gauss(x₀)
         25          3.811e-01  5.573e-02  y = (x₁ + (2.8057 * (2.7241 + tanh((((x₀ * x₀) + 1.0778) * (-1...
                                           .383 * x₁)) + ((3.0596 + x₁) * x₀))))) + gauss(x₀)
         27          3.695e-01  1.539e-02  y = (x₁ + (2.7912 * (2.6926 + tanh(((1.0817 + (x₀ * x₀)) * (-1...
                                           .354 * x₁)) + (x₀ * (x₁ + 2.9809)))))) + gauss(x₀ * 0.68052)
         28          3.086e-01  1.801e-01  y = (x₁ + ((3.1239 * (2.5692 + tanh(((-0.91637 * x₁) * (1.1925...
                                            + (x₀ * x₀))) + (2.7084 * x₀)))) + x₁)) + (-0.26481 * (x₀ * x...
                                           ₀))
         29          3.069e-01  5.544e-03  y = (x₁ + ((3.1239 * (2.5692 + tanh(((-0.91637 * x₁) * (1.1925...
                                            + (x₀ * x₀))) + (2.7084 * x₀)))) + x₁)) + (tanh(-0.26481) * (...
                                           x₀ * x₀))
         30          3.005e-01  2.112e-02  y = (((x₀ + exp(x₀)) * -0.099234) + (x₁ + (3.2461 * (tanh((x₀ ...
                                           * 2.461) + ((x₁ * -0.80509) * (1.2169 + (x₀ * x₀)))) + 2.5271)...
                                           ))) + tanh(x₁)
         31          2.942e-01  2.135e-02  y = tanh(x₁) + (((exp(x₀) + tanh(x₀)) * -0.11162) + (x₁ + (3.1...
                                           633 * (2.5704 + tanh((x₀ * 2.454) + ((x₁ * -0.81203) * (1.1456...
                                            + (x₀ * x₀))))))))
         32          2.912e-01  1.012e-02  y = ((((-0.12872 * exp(x₀)) + 0.1404) + x₁) + (3.1731 * (2.560...
                                           7 + tanh((x₀ * 2.4527) + ((x₁ * -0.80159) * ((x₀ * x₀) + 1.241...
                                           2)))))) + (gauss(0.60254) * x₁)
         33          2.907e-01  1.701e-03  y = ((tanh(1.2005) * (x₁ + -0.214)) + ((-0.64202 * x₀) + (x₁ +...
                                            (3.5385 * (2.3886 + tanh((2.2979 * x₀) + ((x₁ * -0.75938) * (...
                                           1.1159 + (x₀ * x₀))))))))) + -0.22783
         34          2.876e-01  1.090e-02  y = ((-0.099234 * (exp(x₀) + (1.5034 * x₀))) + ((3.2461 * (2.5...
                                           271 + tanh((x₀ * 2.461) + ((x₁ * -0.80509) * (1.2169 + (x₀ * x...
                                           ₀)))))) + x₁)) + (tanh(0.85475) * x₁)
         35          2.874e-01  4.375e-04  y = ((tanh(-0.099234) * (exp(x₀) + (1.5034 * x₀))) + ((3.2461 ...
                                           * (2.5271 + tanh((x₀ * 2.461) + ((x₁ * -0.80509) * (1.2169 + (...
                                           x₀ * x₀)))))) + x₁)) + (tanh(0.85475) * x₁)
         37          2.764e-01  1.952e-02  y = (tanh(0.71735) * x₁) + ((((0.52031 * x₀) * tanh(-0.46195))...
                                            * (gauss(x₁) + x₀)) + (x₁ + (3.2666 * (2.5476 + tanh(((1.2724...
                                            + (x₀ * x₀)) * (x₁ * -0.80613)) + (x₀ * 2.4735))))))
         38          2.681e-01  3.065e-02  y = tanh(-0.15863) + ((((1.0223 * tanh(x₀)) * tanh(-0.92769)) ...
                                           * (gauss(x₁) + x₀)) + ((x₁ + (3.6462 * (2.3667 + tanh(((1.4477...
                                            + (x₀ * x₀)) * (x₁ * -0.77131)) + (x₀ * 2.4317))))) + x₁))
         46          2.484e-01  9.549e-03  y = (gauss((-2.0657 * 1.2018) + (((x₀ + -0.65679) * x₁) * 1.92...
                                           27)) * (1.052 + x₁)) + ((exp(((x₁ * -0.69924) + 1.052) + x₁) *...
                                            gauss(x₀ + -1.1609)) + (exp(1.93) + (tanh((x₀ + x₀) + ((-2.02...
                                           95 * x₁) * x₀)) * 2.254)))
         48          2.474e-01  2.042e-03  y = (gauss(((-2.0657 * 1.2018) + 0.018429) + (((x₀ + -0.65679)...
                                            * x₁) * 1.9227)) * (1.052 + x₁)) + ((exp(((x₁ * -0.69924) + 1...
                                           .052) + x₁) * gauss(x₀ + -1.1609)) + (exp(1.93) + (tanh((x₀ + ...
                                           x₀) + ((-2.0295 * x₁) * x₀)) * 2.254)))
         49          2.445e-01  1.160e-02  y = (gauss((-2.0657 * 1.2018) + (((x₀ + -0.65679) * x₁) * 1.92...
                                           27)) * ((0.8004 + gauss(x₁)) + x₁)) + ((exp(((x₁ * -0.69924) +...
                                            1.052) + x₁) * gauss(x₀ + -1.1609)) + (exp(1.93) + (tanh((x₀ ...
                                           + x₀) + ((-2.0295 * x₁) * x₀)) * 2.254)))
         51          2.435e-01  1.992e-03  y = (gauss((-2.0657 * 1.2018) + (((x₀ + -0.65679) * x₁) * 1.92...
                                           27)) * ((0.8004 + 0.89433) + (gauss(0.79749) * x₁))) + ((exp((...
                                           (x₁ * -0.69924) + 1.052) + x₁) * gauss(x₀ + -1.1609)) + (exp(1...
                                           .93) + (tanh((x₀ + x₀) + ((-2.0295 * x₁) * x₀)) * 2.254)))
         52          2.392e-01  1.789e-02  y = (gauss((-2.0657 * 1.2018) + (((((0.13377 + -0.65679) + x₀)...
                                            + -0.086569) * x₁) * 1.9227)) * ((1.052 + 0.13377) + x₁)) + (...
                                           (exp(((x₁ * -0.69924) + 1.052) + x₁) * gauss(x₀ + -1.1609)) + ...
                                           (exp(1.93) + (tanh((x₀ + x₀) + ((-2.0295 * x₁) * x₀)) * 2.254)...
                                           ))
         53          2.169e-01  9.791e-02  y = ((gauss((((x₀ + -0.54721) * x₁) * 1.703) + -2.1804) * (exp...
                                           (0.70887) + x₁)) + ((exp(1.8875) + ((tanh(((-2.0215 * x₁) * x₀...
                                           ) + (x₀ + x₀)) + 0.038321) * 1.8875)) + (exp((1.3853 + (-1.079...
                                           9 * x₁)) + x₁) * gauss(x₀ + -1.1175)))) + (gauss(x₀) * tanh(0....
                                           14075))
         57          1.885e-01  3.508e-02  y = ((gauss((((x₀ + -0.54721) * x₁) * 1.703) + -2.1804) * (exp...
                                           (x₁) + 0.30883)) + ((exp(1.8875) + (tanh(((-2.0215 * x₁) * x₀)...
                                            + (x₀ + x₀)) * 1.9264)) + ((exp((1.3853 + (-1.0799 * x₁)) + x...
                                           ₁) + tanh(-0.41645 * x₀)) * gauss((x₀ + 0.083826) + -1.1175)))...
                                           ) + (x₀ * tanh(0.14075))
         59          1.831e-01  1.468e-02  y = ((gauss((((x₀ + -0.54721) * x₁) * 1.703) + -2.1804) * (exp...
                                           (x₁) + 0.30883)) + ((exp(1.8875) + ((tanh(((-2.0215 * x₁) * x₀...
                                           ) + (x₀ + x₀)) + tanh(0.038321)) * 1.9264)) + ((exp((1.3853 + ...
                                           (-1.0799 * x₁)) + x₁) + tanh(-0.41645 * x₀)) * gauss((x₀ + 0.0...
                                           83826) + -1.1175)))) + (x₀ * 0.14075)
         60          1.831e-01  7.868e-06  y = ((gauss((((x₀ + -0.54721) * x₁) * 1.703) + -2.1804) * (exp...
                                           (x₁) + 0.30883)) + ((exp(1.8875) + ((tanh(((-2.0215 * x₁) * x₀...
                                           ) + (x₀ + x₀)) + tanh(0.038321)) * 1.9264)) + ((exp((1.3853 + ...
                                           (-1.0799 * x₁)) + x₁) + tanh(-0.41645 * x₀)) * gauss((x₀ + 0.0...
                                           83826) + -1.1175)))) + (x₀ * tanh(0.14075))
         ---------------------------------------------------------------------------------------------------
         ====================================================================================================
         Press 'q' and then <enter> to stop execution early.

         Expressions evaluated per second: 2.580e+05
         Head worker occupation: 25.5%
         Progress: 1670 / 3000 total iterations (55.667%)
         ====================================================================================================
         Hall of Fame:
         ---------------------------------------------------------------------------------------------------
         Complexity  Loss       Score     Equation
         1           5.327e+01  1.594e+01  y = 1.1565
         2           1.353e+01  1.371e+00  y = exp(1.6449)
         3           4.965e+00  1.002e+00  y = 5.4903 + 2.6167
         5           3.787e+00  1.355e-01  y = exp(2.0116) + tanh(x₀)
         6           3.290e+00  1.406e-01  y = (gauss(x₁) * x₀) + 7.7931
         8           2.958e+00  5.319e-02  y = (gauss(x₁ * x₁) * x₀) + 7.797
         10          2.041e+00  1.855e-01  y = (6.173 + (4.5041 * gauss(x₀ + -1.2574))) + 0.69055
         11          1.892e+00  7.618e-02  y = ((gauss(x₀ + -1.1108) * 4.5041) + 6.173) + tanh(x₀)
         12          1.887e+00  2.233e-03  y = (exp(1.9291) + (3.6208 * gauss(x₀ + -1.2023))) + tanh(x₀)
         13          1.170e+00  4.786e-01  y = ((4.5041 * gauss(-1.0916 + x₀)) + 6.173) + (x₀ * gauss(x₁)...
                                           )
         15          9.373e-01  1.107e-01  y = ((4.5041 * gauss(-1.0916 + x₀)) + 6.173) + (x₀ * gauss(x₁ ...
                                           * x₁))
         17          7.821e-01  9.056e-02  y = ((x₀ * 1.4359) * gauss(x₁ * x₁)) + ((4.2673 * gauss(x₀ + -...
                                           1.0206)) + 6.3053)
         18          6.367e-01  2.057e-01  y = (2.4684 * (3.2169 + tanh(((-1.1112 * x₁) * (x₀ * x₀)) + (2...
                                           .8293 * x₀)))) + 0.39738
         19          6.139e-01  3.645e-02  y = tanh(x₁) + (2.6029 * (2.9927 + tanh((2.4238 * x₀) + ((x₀ *...
                                            x₀) * (-0.97231 * x₁)))))
         20          5.260e-01  1.545e-01  y = ((2.9494 + tanh((2.7993 * x₀) + ((-1.0352 * x₁) * ((x₀ * x...
                                           ₀) + 0.64224)))) * 2.6956) + x₁
         23          4.260e-01  7.029e-02  y = ((2.7683 * (2.7683 + tanh((3.1501 * x₀) + (((x₀ * x₀) + 1....
                                           0105) * (x₁ * -1.0856))))) + x₁) + gauss(x₀)
         25          3.811e-01  5.573e-02  y = (x₁ + (2.8057 * (2.7241 + tanh((((x₀ * x₀) + 1.0778) * (-1...
                                           .383 * x₁)) + ((3.0596 + x₁) * x₀))))) + gauss(x₀)
         27          3.111e-01  1.015e-01  y = ((3.359 * (tanh(((1.0891 + (x₀ * x₀)) * (x₁ * -0.94874)) +...
                                            (x₀ * 2.8524)) + 2.3813)) + (x₁ * exp(0.60515))) + (-0.60357 ...
                                           * x₀)
         28          3.010e-01  3.304e-02  y = tanh(x₁) + ((-0.11162 * exp(x₀)) + (x₁ + (3.1633 * (2.5704...
                                            + tanh((x₀ * 2.454) + ((x₁ * -0.81203) * ((x₀ * x₀) + 1.1456)...
                                           ))))))
         29          2.889e-01  4.104e-02  y = (tanh(x₁) + ((3.1958 * (2.5735 + tanh((2.375 * x₀) + (((x₀...
                                            * x₀) + 1.3928) * (-0.76243 * x₁))))) + ((x₀ * x₀) * -0.26621...
                                           ))) + x₁
         30          2.881e-01  2.705e-03  y = x₁ + ((((x₀ * x₀) * tanh(-0.26621)) + (3.1958 * (2.5735 + ...
                                           tanh((2.375 * x₀) + ((-0.76243 * x₁) * (1.3928 + (x₀ * x₀)))))...
                                           )) + tanh(x₁))
         31          2.780e-01  3.570e-02  y = (x₁ + ((3.1958 * (2.5735 + tanh((2.375 * x₀) + (((x₀ * x₀)...
                                            + 1.3928) * (-0.76243 * x₁))))) + ((x₀ * x₀) * -0.26621))) + ...
                                           (x₁ * tanh(1.003))
         33          2.766e-01  2.554e-03  y = (x₁ + ((3.1958 * (2.5735 + tanh((2.375 * x₀) + (((x₀ * x₀)...
                                            + (1.3928 + -0.022692)) * (-0.76243 * x₁))))) + ((x₀ * x₀) * ...
                                           -0.26621))) + (x₁ * tanh(1.003))
         35          2.689e-01  1.406e-02  y = -0.15863 + (((tanh(x₀) * tanh(-0.92769)) * (gauss(x₁) + x₀...
                                           )) + ((x₁ + (3.6462 * (2.3667 + tanh((x₀ * 2.4317) + ((1.4477 ...
                                           + (x₀ * x₀)) * (x₁ * -0.77131)))))) + x₁))
         37          2.681e-01  1.528e-03  y = -0.15863 + ((((1.0223 * tanh(x₀)) * tanh(-0.92769)) * (gau...
                                           ss(x₁) + x₀)) + ((x₁ + (3.6462 * (2.3667 + tanh(((1.4477 + (x₀...
                                            * x₀)) * (x₁ * -0.77131)) + (x₀ * 2.4317))))) + x₁))
         38          2.605e-01  2.860e-02  y = -0.15863 + (((x₁ + (3.6462 * (2.3667 + tanh((2.4317 * x₀) ...
                                           + ((1.4477 + (x₀ * x₀)) * (x₁ * -0.77131)))))) + x₁) + ((tanh(...
                                           x₀) * -0.92769) * ((gauss(x₀ * x₁) + x₀) + -0.27207)))
         41          2.300e-01  4.149e-02  y = (((exp(1.896) + (tanh((-2.0283 * (x₁ * x₀)) + (x₀ + x₀)) *...
                                            1.896)) + (exp(1.3094) * gauss(x₀ + -1.0577))) + (exp(1.1008)...
                                            * gauss(((((x₀ + -1.03) * x₁) * 1.5736) + -2.3586) + x₁))) + ...
                                           0.21962
         42          1.860e-01  2.125e-01  y = gauss(1.896) + ((exp(1.0914) * gauss(x₁ + ((((-1.03 + x₀) ...
                                           * x₁) * 1.5736) + -2.3586))) + ((gauss(-1.0577 + x₀) * exp(1.3...
                                           094)) + (exp(1.896) + (tanh((-2.0283 * (x₀ * x₁)) + (x₀ + x₀))...
                                            * 1.8398))))
         46          1.773e-01  1.201e-02  y = -0.1698 + (((exp(1.9388) + (1.8565 * tanh((x₀ + x₀) + ((-2...
                                           .0273 * x₁) * x₀)))) + (gauss(-0.98199 + x₀) * (tanh(x₀ + x₀) ...
                                           + exp(0.99386)))) + (exp(1.1164) * gauss((-2.4091 + ((x₁ * (x₀...
                                            + -1.0336)) * 1.6275)) + x₁)))
         48          1.700e-01  2.093e-02  y = (gauss((x₀ + x₀) + x₀) * x₀) + ((exp(1.0914) * gauss(x₁ + ...
                                           ((((-1.03 + x₀) * x₁) * 1.5736) + -2.3586))) + ((gauss(-1.0577...
                                            + x₀) * exp(1.3094)) + (exp(1.896) + (1.8398 * tanh((-2.0283 ...
                                           * (x₀ * x₁)) + (x₀ + x₀))))))
         49          1.651e-01  2.924e-02  y = ((gauss(x₀ + x₀) * x₀) * gauss(x₁)) + ((exp(1.0914) * gaus...
                                           s(x₁ + ((((-1.03 + x₀) * x₁) * 1.5736) + -2.3586))) + ((gauss(...
                                           -1.0577 + x₀) * exp(1.3094)) + (exp(1.896) + (1.8398 * tanh((-...
                                           2.0283 * (x₀ * x₁)) + (x₀ + x₀))))))
         51          1.591e-01  1.860e-02  y = ((gauss(x₀ + x₀) * x₀) * (gauss(x₁) + 0.64816)) + ((exp(1....
                                           0914) * gauss(x₁ + ((((-1.03 + x₀) * x₁) * 1.5736) + -2.3586))...
                                           ) + ((gauss(-1.0577 + x₀) * exp(1.3094)) + (exp(1.896) + (1.83...
                                           98 * tanh((-2.0283 * (x₀ * x₁)) + (x₀ + x₀))))))
         54          1.536e-01  1.169e-02  y = ((gauss((x₀ + x₀) + x₀) * x₀) * (gauss(x₁) + exp(0.64816))...
                                           ) + ((exp(1.0914) * gauss(x₁ + ((((-1.03 + x₀) * x₁) * 1.5736)...
                                            + -2.3586))) + ((gauss(-1.0577 + x₀) * exp(1.3094)) + (exp(1....
                                           896) + (1.8398 * tanh((-2.0283 * (x₀ * x₁)) + (x₀ + x₀))))))
         56          1.531e-01  1.531e-03  y = ((gauss((x₀ + x₀) + x₀) * x₀) * ((gauss(x₁) + exp(0.64816)...
                                           ) + x₀)) + ((exp(1.0914) * gauss(x₁ + ((((-1.03 + x₀) * x₁) * ...
                                           1.5736) + -2.3586))) + ((gauss(-1.0577 + x₀) * exp(1.3094)) + ...
                                           (exp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ * x₁)) + (x₀ + x₀)...
                                           )))))
         57          1.520e-01  7.432e-03  y = (((gauss(x₀) + gauss(x₀ + -0.10408)) * (gauss(x₀ + x₀) * x...
                                           ₀)) * gauss(x₁)) + ((exp(1.0914) * gauss(x₁ + ((((-1.03 + x₀) ...
                                           * x₁) * 1.5736) + -2.3586))) + ((gauss(-1.0577 + x₀) * exp(1.3...
                                           094)) + (exp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ * x₁)) + (...
                                           x₀ + x₀))))))
         58          1.499e-01  1.375e-02  y = (((exp(x₀) + gauss(x₀ + -0.10408)) * (gauss(x₀ + x₀) * tan...
                                           h(x₀))) * gauss(x₁)) + ((exp(1.0914) * gauss(x₁ + ((((-1.03 + ...
                                           x₀) * x₁) * 1.5736) + -2.3586))) + ((gauss(-1.0577 + x₀) * exp...
                                           (1.3094)) + (exp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ * x₁))...
                                            + (x₀ + x₀))))))
         59          1.496e-01  2.291e-03  y = ((gauss((x₀ + (x₀ * x₁)) + x₀) * tanh(x₀)) * ((gauss(x₁) +...
                                            exp(0.64816)) + x₀)) + ((exp(1.0914) * gauss(x₁ + ((((-1.03 +...
                                            x₀) * x₁) * 1.5736) + -2.3586))) + ((gauss(-1.0577 + x₀) * ex...
                                           p(1.3094)) + (exp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ * x₁)...
                                           ) + (x₀ + x₀))))))
         ---------------------------------------------------------------------------------------------------
         ====================================================================================================
         Press 'q' and then <enter> to stop execution early.

         Expressions evaluated per second: 2.590e+05
         Head worker occupation: 28.0%
         Progress: 2225 / 3000 total iterations (74.167%)
         ====================================================================================================
         Hall of Fame:
         ---------------------------------------------------------------------------------------------------
         Complexity  Loss       Score     Equation
         1           5.327e+01  1.594e+01  y = 1.1565
         2           1.353e+01  1.371e+00  y = exp(1.6449)
         3           4.965e+00  1.002e+00  y = 3.6274 + 4.4796
         5           3.787e+00  1.355e-01  y = exp(2.0116) + tanh(x₀)
         6           3.290e+00  1.406e-01  y = (gauss(x₁) * x₀) + 7.7931
         8           2.958e+00  5.319e-02  y = (gauss(x₁ * x₁) * x₀) + 7.797
         10          2.041e+00  1.855e-01  y = (6.173 + (4.5041 * gauss(x₀ + -1.2574))) + 0.69055
         11          1.838e+00  1.048e-01  y = ((4.6875 * gauss(x₀ + -1.1108)) + 6.2768) + tanh(x₀)
         13          1.119e+00  2.481e-01  y = (gauss(x₁) * x₀) + (6.3341 + (4.6876 * gauss(x₀ + -1.1108)...
                                           ))
         15          8.890e-01  1.151e-01  y = (6.371 + (4.5767 * gauss(x₀ + -1.1059))) + (gauss(x₁ * x₁)...
                                            * x₀)
         17          7.821e-01  6.406e-02  y = ((x₀ * 1.4359) * gauss(x₁ * x₁)) + ((4.2673 * gauss(x₀ + -...
                                           1.0206)) + 6.3053)
         18          6.367e-01  2.057e-01  y = (2.4684 * (3.2169 + tanh(((-1.1112 * x₁) * (x₀ * x₀)) + (2...
                                           .8293 * x₀)))) + 0.39738
         19          6.139e-01  3.645e-02  y = tanh(x₁) + (2.6029 * (2.9927 + tanh((2.4238 * x₀) + ((x₀ *...
                                            x₀) * (-0.97231 * x₁)))))
         20          5.260e-01  1.545e-01  y = ((2.9494 + tanh((2.7993 * x₀) + ((-1.0352 * x₁) * ((x₀ * x...
                                           ₀) + 0.64224)))) * 2.6956) + x₁
         23          4.218e-01  7.361e-02  y = ((2.7683 * (2.7683 + tanh((3.1501 * x₀) + (((x₀ * x₀) + 0....
                                           92638) * (x₁ * -1.0856))))) + x₁) + gauss(x₀)
         25          3.811e-01  5.075e-02  y = (x₁ + (2.8057 * (2.7241 + tanh((((x₀ * x₀) + 1.0778) * (-1...
                                           .383 * x₁)) + ((3.0596 + x₁) * x₀))))) + gauss(x₀)
         26          2.927e-01  2.640e-01  y = (x₁ + ((3.6942 * (2.1672 + tanh((((x₀ * x₀) + 1.2224) * (-...
                                           0.70999 * x₁)) + (2.1818 * x₀)))) + (-0.71496 * x₀))) + x₁
         29          2.889e-01  4.340e-03  y = (tanh(x₁) + ((3.1958 * (2.5735 + tanh((2.375 * x₀) + (((x₀...
                                            * x₀) + 1.3928) * (-0.76243 * x₁))))) + ((x₀ * x₀) * -0.26621...
                                           ))) + x₁
         30          2.779e-01  3.858e-02  y = (x₁ + ((3.1958 * (2.5735 + tanh((2.375 * x₀) + (((x₀ * x₀)...
                                            + 1.3928) * (-0.76243 * x₁))))) + ((x₀ * x₀) * -0.26621))) + ...
                                           (x₁ * 0.85054)
         31          2.766e-01  5.000e-03  y = (x₁ + ((3.1958 * (2.5735 + tanh((2.375 * x₀) + (((x₀ * x₀)...
                                            + 1.3928) * (-0.76243 * x₁))))) + ((x₀ * x₀) * -0.26621))) + ...
                                           (x₁ * tanh(1.0914))
         33          2.761e-01  8.054e-04  y = (x₁ + ((3.1958 * (2.5735 + tanh((2.375 * x₀) + (((x₀ * x₀)...
                                            + (1.3928 + -0.022692)) * (-0.76243 * x₁))))) + ((x₀ * x₀) * ...
                                           -0.26621))) + (x₁ * tanh(1.0914))
         34          2.759e-01  7.447e-04  y = (x₁ + 0.042129) + (x₁ + ((3.1958 * (2.5735 + tanh((2.375 *...
                                            x₀) + (((x₀ * x₀) + (1.3928 + -0.022692)) * (-0.76243 * x₁)))...
                                           )) + (((x₀ * x₀) + x₁) * -0.26621)))
         35          2.641e-01  4.369e-02  y = x₁ + ((x₁ + ((3.5983 * (tanh(((1.3198 + (x₀ * x₀)) * (-0.7...
                                           292 * x₁)) + (2.2711 * x₀)) + 2.3013)) + (-0.85583 * (x₀ + x₁)...
                                           ))) + (tanh(x₁ + x₀) * x₁))
         38          2.605e-01  4.554e-03  y = -0.15863 + (((x₁ + (3.6462 * (2.3667 + tanh((2.4317 * x₀) ...
                                           + ((1.4477 + (x₀ * x₀)) * (x₁ * -0.77131)))))) + x₁) + ((tanh(...
                                           x₀) * -0.92769) * ((gauss(x₀ * x₁) + x₀) + -0.27207)))
         39          2.604e-01  4.406e-04  y = -0.15863 + (((x₁ + (3.6462 * (2.3667 + tanh((2.4317 * x₀) ...
                                           + ((1.4477 + (x₀ * x₀)) * (x₁ * -0.77131)))))) + x₁) + ((tanh(...
                                           x₀) * -0.92769) * ((gauss(x₀ * x₁) + x₀) + tanh(-0.27207))))
         41          1.874e-01  1.645e-01  y = -0.043744 + (((exp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ ...
                                           * x₁)) + (x₀ + x₀)))) + (gauss(-1.0577 + x₀) * exp(1.3298))) +...
                                            (exp(1.0914) * gauss(x₁ + ((((-1.03 + x₀) * x₁) * 1.5736) + -...
                                           2.3586))))
         42          1.860e-01  7.629e-03  y = gauss(1.896) + ((exp(1.0914) * gauss(x₁ + ((((-1.03 + x₀) ...
                                           * x₁) * 1.5736) + -2.3586))) + ((gauss(-1.0577 + x₀) * exp(1.3...
                                           094)) + (exp(1.896) + (tanh((-2.0283 * (x₀ * x₁)) + (x₀ + x₀))...
                                            * 1.8398))))
         44          1.859e-01  2.639e-04  y = gauss(1.896 + 0.50811) + ((exp(1.0914) * gauss(x₁ + ((((-1...
                                           .03 + x₀) * x₁) * 1.5736) + -2.3586))) + ((gauss(-1.0577 + x₀)...
                                            * exp(1.3094)) + (exp(1.896) + (tanh((-2.0283 * (x₀ * x₁)) + ...
                                           (x₀ + x₀)) * 1.8398))))
         45          1.853e-01  3.415e-03  y = (0.010223 + (((gauss(-1.0457 + x₀) * exp(1.3115)) + ((1.82...
                                           61 * tanh((-2.0263 * (x₀ * x₁)) + (x₀ + x₀))) + exp(1.8927))) ...
                                           + (exp(1.1035) * gauss(x₁ + ((1.5802 * ((-1.0606 + x₀) * x₁)) ...
                                           + -2.3138))))) + (0.0095379 * 0.81835)
         46          1.663e-01  1.078e-01  y = (gauss(x₀ + x₀) * x₀) + ((exp(1.0914) * gauss(x₁ + ((((-1....
                                           03 + x₀) * x₁) * 1.5736) + -2.3586))) + ((gauss(-1.0577 + x₀) ...
                                           * exp(1.3094)) + (exp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ *...
                                            x₁)) + (x₀ + x₀))))))
         47          1.660e-01  1.959e-03  y = (gauss(x₀ + x₀) * tanh(x₀)) + ((exp(1.0914) * gauss(x₁ + (...
                                           (((-1.03 + x₀) * x₁) * 1.5736) + -2.3586))) + ((gauss(-1.0577 ...
                                           + x₀) * exp(1.3094)) + (exp(1.896) + (tanh((-2.0283 * (x₀ * x₁...
                                           )) + (x₀ + x₀)) * 1.8398))))
         49          1.628e-01  9.646e-03  y = (gauss(x₀ + x₀) * tanh(x₀ + x₀)) + ((exp(1.0914) * gauss(x...
                                           ₁ + ((((-1.03 + x₀) * x₁) * 1.5736) + -2.3586))) + ((gauss(-1....
                                           0577 + x₀) * exp(1.3094)) + (exp(1.896) + (tanh((-2.0283 * (x₀...
                                            * x₁)) + (x₀ + x₀)) * 1.8398))))
         51          1.550e-01  2.461e-02  y = ((gauss(x₀ + x₀) * (x₀ + x₀)) * gauss(x₁)) + ((exp(1.0914)...
                                            * gauss(x₁ + ((((-1.03 + x₀) * x₁) * 1.5736) + -2.3586))) + (...
                                           (gauss(-1.0577 + x₀) * exp(1.3094)) + (exp(1.896) + (1.8398 * ...
                                           tanh((-2.0283 * (x₀ * x₁)) + (x₀ + x₀))))))
         53          1.539e-01  3.664e-03  y = ((gauss((x₀ * 1.6417) + x₀) * (x₀ + x₀)) * gauss(x₁)) + ((...
                                           exp(1.0914) * gauss(x₁ + ((((-1.03 + x₀) * x₁) * 1.5736) + -2....
                                           3586))) + ((gauss(-1.0577 + x₀) * exp(1.3094)) + (exp(1.896) +...
                                            (1.8398 * tanh((-2.0283 * (x₀ * x₁)) + (x₀ + x₀))))))
         54          1.536e-01  1.916e-03  y = ((gauss((x₀ + x₀) + x₀) * x₀) * (gauss(x₁) + exp(0.64816))...
                                           ) + ((exp(1.0914) * gauss(x₁ + ((((-1.03 + x₀) * x₁) * 1.5736)...
                                            + -2.3586))) + ((gauss(-1.0577 + x₀) * exp(1.3094)) + (exp(1....
                                           896) + (1.8398 * tanh((-2.0283 * (x₀ * x₁)) + (x₀ + x₀))))))
         55          1.475e-01  4.066e-02  y = ((gauss((x₀ * 1.6417) + x₀) * ((x₀ * 1.6417) + x₀)) * gaus...
                                           s(x₁)) + ((exp(1.0914) * gauss(x₁ + ((((-1.03 + x₀) * x₁) * 1....
                                           5736) + -2.3586))) + ((gauss(-1.0577 + x₀) * exp(1.3094)) + (e...
                                           xp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ * x₁)) + (x₀ + x₀)))...
                                           )))
         57          1.453e-01  7.266e-03  y = ((gauss((x₀ * 1.6417) + x₀) * ((x₀ * 1.6417) + x₀)) * gaus...
                                           s(x₁ * x₁)) + ((exp(1.0914) * gauss(x₁ + ((((-1.03 + x₀) * x₁)...
                                            * 1.5736) + -2.3586))) + ((gauss(-1.0577 + x₀) * exp(1.3094))...
                                            + (exp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ * x₁)) + (x₀ + ...
                                           x₀))))))
         59          1.396e-01  2.027e-02  y = ((gauss((x₀ * 1.6417) + x₀) * (((x₀ * 1.6417) + x₀) + (x₀ ...
                                           + x₀))) * gauss(x₁)) + ((exp(1.0914) * gauss(x₁ + ((((-1.03 + ...
                                           x₀) * x₁) * 1.5736) + -2.3586))) + ((gauss(-1.0577 + x₀) * exp...
                                           (1.3094)) + (exp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ * x₁))...
                                            + (x₀ + x₀))))))
         ---------------------------------------------------------------------------------------------------
         ====================================================================================================
         Press 'q' and then <enter> to stop execution early.

         Expressions evaluated per second: 2.600e+05
         Head worker occupation: 27.3%
         Progress: 2768 / 3000 total iterations (92.267%)
         ====================================================================================================
         Hall of Fame:
         ---------------------------------------------------------------------------------------------------
         Complexity  Loss       Score     Equation
         1           5.327e+01  1.594e+01  y = 1.1565
         2           1.353e+01  1.371e+00  y = exp(1.6449)
         3           4.965e+00  1.002e+00  y = 3.6274 + 4.4796
         5           3.787e+00  1.355e-01  y = exp(2.0116) + tanh(x₀)
         6           3.290e+00  1.406e-01  y = (gauss(x₁) * x₀) + 7.7931
         8           2.958e+00  5.319e-02  y = (gauss(x₁ * x₁) * x₀) + 7.797
         10          2.041e+00  1.855e-01  y = (6.173 + (4.5041 * gauss(x₀ + -1.2574))) + 0.69055
         11          1.837e+00  1.053e-01  y = (6.371 + (4.5767 * gauss(x₀ + -1.1968))) + tanh(x₀)
         13          1.119e+00  2.479e-01  y = (gauss(x₁) * x₀) + (6.3341 + (4.6876 * gauss(x₀ + -1.1108)...
                                           ))
         15          8.890e-01  1.151e-01  y = (6.371 + (4.5767 * gauss(x₀ + -1.1059))) + (gauss(x₁ * x₁)...
                                            * x₀)
         17          7.821e-01  6.406e-02  y = ((x₀ * 1.4359) * gauss(x₁ * x₁)) + ((4.2673 * gauss(x₀ + -...
                                           1.0206)) + 6.3053)
         18          6.367e-01  2.057e-01  y = (2.4684 * (3.2169 + tanh(((-1.1112 * x₁) * (x₀ * x₀)) + (2...
                                           .8293 * x₀)))) + 0.39738
         19          6.139e-01  3.645e-02  y = tanh(x₁) + (2.6029 * (2.9927 + tanh((2.4238 * x₀) + ((x₀ *...
                                            x₀) * (-0.97231 * x₁)))))
         20          5.260e-01  1.545e-01  y = ((2.9494 + tanh((2.7993 * x₀) + ((-1.0352 * x₁) * ((x₀ * x...
                                           ₀) + 0.64224)))) * 2.6956) + x₁
         22          5.260e-01  3.278e-07  y = ((2.9494 + tanh((2.7993 * x₀) + ((-1.0352 * x₁) * (((x₀ * ...
                                           x₀) + 0.64224) + -0.0019751)))) * 2.6956) + x₁
         23          4.218e-01  2.208e-01  y = ((2.7683 * (2.7683 + tanh((3.1501 * x₀) + (((x₀ * x₀) + 0....
                                           92638) * (x₁ * -1.0856))))) + x₁) + gauss(x₀)
         25          3.811e-01  5.075e-02  y = (x₁ + (2.8057 * (2.7241 + tanh((((x₀ * x₀) + 1.0778) * (-1...
                                           .383 * x₁)) + ((3.0596 + x₁) * x₀))))) + gauss(x₀)
         26          2.927e-01  2.640e-01  y = (x₁ + ((3.6942 * (2.1672 + tanh((((x₀ * x₀) + 1.2224) * (-...
                                           0.70999 * x₁)) + (2.1818 * x₀)))) + (-0.71496 * x₀))) + x₁
         29          2.889e-01  4.340e-03  y = (tanh(x₁) + ((3.1958 * (2.5735 + tanh((2.375 * x₀) + (((x₀...
                                            * x₀) + 1.3928) * (-0.76243 * x₁))))) + ((x₀ * x₀) * -0.26621...
                                           ))) + x₁
         30          2.779e-01  3.858e-02  y = (x₁ + ((3.1958 * (2.5735 + tanh((2.375 * x₀) + (((x₀ * x₀)...
                                            + 1.3928) * (-0.76243 * x₁))))) + ((x₀ * x₀) * -0.26621))) + ...
                                           (x₁ * 0.85054)
         31          2.766e-01  5.000e-03  y = (x₁ + ((3.1958 * (2.5735 + tanh((2.375 * x₀) + (((x₀ * x₀)...
                                            + 1.3928) * (-0.76243 * x₁))))) + ((x₀ * x₀) * -0.26621))) + ...
                                           (x₁ * tanh(1.0914))
         33          2.761e-01  9.043e-04  y = (x₁ + ((3.1958 * (2.5735 + tanh((2.375 * x₀) + (((x₀ * x₀)...
                                            + (1.3928 + -0.022692)) * (-0.76243 * x₁))))) + ((x₀ * x₀) * ...
                                           -0.26621))) + (x₁ * tanh(1.0642))
         34          2.759e-01  5.470e-04  y = (x₁ + 0.042129) + (x₁ + ((3.1958 * (2.5735 + tanh((2.375 *...
                                            x₀) + (((x₀ * x₀) + (1.3928 + -0.022692)) * (-0.76243 * x₁)))...
                                           )) + (((x₀ * x₀) + x₁) * -0.26621)))
         35          2.641e-01  4.369e-02  y = x₁ + ((x₁ + ((3.5983 * (tanh(((1.3198 + (x₀ * x₀)) * (-0.7...
                                           292 * x₁)) + (2.2711 * x₀)) + 2.3013)) + (-0.85583 * (x₀ + x₁)...
                                           ))) + (tanh(x₁ + x₀) * x₁))
         38          2.605e-01  4.554e-03  y = -0.15863 + (((x₁ + (3.6462 * (2.3667 + tanh((2.4317 * x₀) ...
                                           + ((1.4477 + (x₀ * x₀)) * (x₁ * -0.77131)))))) + x₁) + ((tanh(...
                                           x₀) * -0.92769) * ((gauss(x₀ * x₁) + x₀) + -0.27207)))
         39          2.604e-01  4.406e-04  y = -0.15863 + (((x₁ + (3.6462 * (2.3667 + tanh((2.4317 * x₀) ...
                                           + ((1.4477 + (x₀ * x₀)) * (x₁ * -0.77131)))))) + x₁) + ((tanh(...
                                           x₀) * -0.92769) * ((gauss(x₀ * x₁) + x₀) + tanh(-0.27207))))
         40          2.569e-01  1.367e-02  y = -0.15863 + (((x₁ + (3.6462 * (2.3667 + tanh(((1.4477 + (x₀...
                                            * x₀)) * (x₁ * -0.77131)) + (2.4317 * x₀))))) + x₁) + ((tanh(...
                                           x₀) * -0.92769) * ((gauss((x₀ * x₁) * -0.77131) + x₀) + -0.272...
                                           07)))
         41          1.860e-01  3.226e-01  y = ((exp(1.0914) * gauss(x₁ + ((((x₀ + -1.03) * x₁) * 1.5736)...
                                            + -2.3586))) + ((gauss(-1.0577 + x₀) * exp(1.3094)) + (exp(1....
                                           896) + (1.8398 * tanh((-2.0283 * (x₀ * x₁)) + (x₀ + x₀)))))) +...
                                            -0.0025188
         42          1.858e-01  1.308e-03  y = gauss(2.1276) + ((exp(1.0914) * gauss(x₁ + ((((-1.03 + x₀)...
                                            * x₁) * 1.5736) + -2.3586))) + ((gauss(-1.0577 + x₀) * exp(1....
                                           3094)) + (exp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ * x₁)) + ...
                                           (x₀ + x₀))))))
         43          1.858e-01  2.080e-05  y = ((exp(1.0914) * (gauss(x₁ + ((((x₀ + -1.03) * x₁) * 1.5736...
                                           ) + -2.3586)) + 0.0048081)) + ((gauss(-1.0577 + x₀) * exp(1.30...
                                           94)) + (exp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ * x₁)) + (x...
                                           ₀ + x₀)))))) + -0.0025188
         44          1.836e-01  1.194e-02  y = (gauss(1.8398) * x₀) + ((exp(1.0914) * gauss(x₁ + ((((-1.0...
                                           3 + x₀) * x₁) * 1.5736) + -2.3586))) + ((gauss(-1.0577 + x₀) *...
                                            exp(1.3094)) + (exp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ * ...
                                           x₁)) + (x₀ + x₀))))))
         45          1.830e-01  3.019e-03  y = ((exp(1.0914) * gauss(x₁ + ((((-1.03 + x₀) * x₁) * 1.5736)...
                                            + -2.3586))) + (((gauss(x₀ + -1.0577) * exp(1.3094)) + 0.2226...
                                           1) + (exp(1.896) + (tanh((-2.0283 * ((x₀ + 0.08313) * x₁)) + (...
                                           x₀ + x₀)) * 1.8398)))) + -0.089387
         46          1.663e-01  9.568e-02  y = (gauss(x₀ + x₀) * x₀) + ((exp(1.0914) * gauss(x₁ + ((((-1....
                                           03 + x₀) * x₁) * 1.5736) + -2.3586))) + ((gauss(-1.0577 + x₀) ...
                                           * exp(1.3094)) + (exp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ *...
                                            x₁)) + (x₀ + x₀))))))
         47          1.660e-01  1.959e-03  y = (gauss(x₀ + x₀) * tanh(x₀)) + ((exp(1.0914) * gauss(x₁ + (...
                                           (((-1.03 + x₀) * x₁) * 1.5736) + -2.3586))) + ((gauss(-1.0577 ...
                                           + x₀) * exp(1.3094)) + (exp(1.896) + (tanh((-2.0283 * (x₀ * x₁...
                                           )) + (x₀ + x₀)) * 1.8398))))
         48          1.647e-01  8.044e-03  y = ((gauss(x₀ + x₀) * x₀) + 0.03433) + ((exp(1.0914) * gauss(...
                                           x₁ + ((((-1.03 + x₀) * x₁) * 1.5736) + -2.3586))) + ((gauss(-1...
                                           .0577 + x₀) * exp(1.3094)) + (exp(1.896) + (1.8398 * tanh((-2....
                                           0283 * (x₀ * x₁)) + (x₀ + x₀))))))
         49          1.628e-01  1.125e-02  y = (gauss(x₀ + x₀) * tanh(x₀ + x₀)) + ((exp(1.0914) * gauss(x...
                                           ₁ + ((((-1.03 + x₀) * x₁) * 1.5736) + -2.3586))) + ((gauss(-1....
                                           0577 + x₀) * exp(1.3094)) + (exp(1.896) + (tanh((-2.0283 * (x₀...
                                            * x₁)) + (x₀ + x₀)) * 1.8398))))
         50          1.617e-01  6.746e-03  y = ((x₀ * gauss((x₀ * 1.6417) + x₀)) * 1.5736) + ((exp(1.0914...
                                           ) * gauss(x₁ + ((((-1.03 + x₀) * x₁) * 1.5736) + -2.3586))) + ...
                                           ((gauss(-1.0577 + x₀) * exp(1.3094)) + (exp(1.896) + (1.845 * ...
                                           tanh((-2.0283 * (x₀ * x₁)) + (x₀ + x₀))))))
         51          1.550e-01  4.247e-02  y = ((gauss(x₀ + x₀) * (x₀ + x₀)) * gauss(x₁)) + ((exp(1.0914)...
                                            * gauss(x₁ + ((((-1.03 + x₀) * x₁) * 1.5736) + -2.3586))) + (...
                                           (gauss(-1.0577 + x₀) * exp(1.3094)) + (exp(1.896) + (1.8398 * ...
                                           tanh((-2.0283 * (x₀ * x₁)) + (x₀ + x₀))))))
         52          1.531e-01  1.213e-02  y = ((gauss(x₀ + x₀) * tanh(x₀ + x₀)) * gauss(x₁)) + ((exp(1.0...
                                           914) * gauss(x₁ + ((((-1.03 + x₀) * x₁) * 1.5736) + -2.3586)))...
                                            + ((gauss(-1.0577 + x₀) * exp(1.3094)) + (exp(1.896) + (1.839...
                                           8 * tanh((-2.0283 * (x₀ * x₁)) + (x₀ + x₀))))))
         53          1.522e-01  6.301e-03  y = ((gauss(x₀ + x₀) * (x₀ + x₀)) * gauss(x₁)) + ((exp(1.0914)...
                                            * gauss(x₁ + ((((-1.03 + x₀) * x₁) * 1.5736) + -2.3586))) + (...
                                           (gauss(-1.0577 + x₀) * exp(1.3094)) + (exp(1.896) + ((1.8398 +...
                                            -0.080836) * tanh((-2.0283 * (x₀ * x₁)) + (x₀ + x₀))))))
         54          1.505e-01  1.118e-02  y = (((gauss(x₀ + x₀) * tanh(x₀ + x₀)) * 1.1721) * gauss(x₁)) ...
                                           + ((exp(1.0914) * gauss(x₁ + ((((-1.03 + x₀) * x₁) * 1.5736) +...
                                            -2.3586))) + ((gauss(-1.0577 + x₀) * exp(1.3094)) + (exp(1.89...
                                           6) + (1.8398 * tanh((-2.0283 * (x₀ * x₁)) + (x₀ + x₀))))))
         55          1.475e-01  2.030e-02  y = ((gauss((x₀ * 1.6417) + x₀) * ((x₀ * 1.6417) + x₀)) * gaus...
                                           s(x₁)) + ((exp(1.0914) * gauss(x₁ + ((((-1.03 + x₀) * x₁) * 1....
                                           5736) + -2.3586))) + ((gauss(-1.0577 + x₀) * exp(1.3094)) + (e...
                                           xp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ * x₁)) + (x₀ + x₀)))...
                                           )))
         56          1.458e-01  1.120e-02  y = ((gauss((x₀ * 1.6417) + x₀) * ((x₀ * exp(1.6417)) + x₀)) *...
                                            gauss(x₁)) + ((exp(1.0914) * gauss(x₁ + ((((-1.03 + x₀) * x₁)...
                                            * 1.5736) + -2.3586))) + ((gauss(-1.0577 + x₀) * exp(1.3094))...
                                            + (exp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ * x₁)) + (x₀ + ...
                                           x₀))))))
         57          1.400e-01  4.051e-02  y = ((((tanh(x₀) * exp(1.0914)) + x₀) * gauss((x₀ * 1.6417) + ...
                                           x₀)) * gauss(x₁)) + ((exp(1.0914) * gauss(x₁ + ((((-1.03 + x₀)...
                                            * x₁) * 1.5736) + -2.3586))) + ((gauss(-1.0577 + x₀) * exp(1....
                                           3094)) + (exp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ * x₁)) + ...
                                           (x₀ + x₀))))))
         58          1.350e-01  3.670e-02  y = ((((x₀ * exp(1.6417 + x₀)) + x₀) * gauss((x₀ * 1.6417) + x...
                                           ₀)) * gauss(x₁)) + ((exp(1.0914) * gauss(x₁ + ((((-1.03 + x₀) ...
                                           * x₁) * 1.5736) + -2.3586))) + ((gauss(-1.0577 + x₀) * exp(1.3...
                                           094)) + (exp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ * x₁)) + (...
                                           x₀ + x₀))))))
         59          1.338e-01  8.756e-03  y = ((((tanh(x₀) * exp(1.6417 + x₀)) + x₀) * gauss((x₀ * 1.641...
                                           7) + x₀)) * gauss(x₁)) + ((exp(1.0914) * gauss(x₁ + ((((-1.03 ...
                                           + x₀) * x₁) * 1.5736) + -2.3586))) + ((gauss(-1.0577 + x₀) * e...
                                           xp(1.3094)) + (exp(1.896) + (1.8398 * tanh((-2.0283 * (x₀ * x₁...
                                           )) + (x₀ + x₀))))))
         ---------------------------------------------------------------------------------------------------
         ====================================================================================================
         Press 'q' and then <enter> to stop execution early.


         Checking if pysr_model_temp.pkl exists...
         Loading model from pysr_model_temp.pkl


         Re-optimizing parameterized candidate function 1/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/2...

         Re-optimizing parameterized candidate function 2/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/2...

         Re-optimizing parameterized candidate function 3/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/2...

         Re-optimizing parameterized candidate function 4/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/2...

         Re-optimizing parameterized candidate function 5/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/2...

         Re-optimizing parameterized candidate function 6/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/2...

         Re-optimizing parameterized candidate function 7/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/8...

         Re-optimizing parameterized candidate function 8/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/8...

         Re-optimizing parameterized candidate function 9/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/8...

         Re-optimizing parameterized candidate function 10/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/8...

         Re-optimizing parameterized candidate function 11/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/16...

         Re-optimizing parameterized candidate function 12/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/16...

         Re-optimizing parameterized candidate function 13/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/16...

         Re-optimizing parameterized candidate function 14/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/32...

         Re-optimizing parameterized candidate function 15/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/32...

         Re-optimizing parameterized candidate function 16/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/32...

         Re-optimizing parameterized candidate function 17/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/32...

         Re-optimizing parameterized candidate function 18/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/64...

         Re-optimizing parameterized candidate function 19/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/64...

         Re-optimizing parameterized candidate function 20/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/128...

         Re-optimizing parameterized candidate function 21/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/128...

         Re-optimizing parameterized candidate function 22/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/128...

         Re-optimizing parameterized candidate function 23/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/128...

         Re-optimizing parameterized candidate function 24/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/128...

         Re-optimizing parameterized candidate function 25/46...
             >>> loop of re-parameterization with less NDF for bad fits 3/128...

         Re-optimizing parameterized candidate function 26/46...
             >>> loop of re-parameterization with less NDF for bad fits 3/128...

         Re-optimizing parameterized candidate function 27/46...
             >>> loop of re-parameterization with less NDF for bad fits 3/128...

         Re-optimizing parameterized candidate function 28/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/512...

         Re-optimizing parameterized candidate function 29/46...
             >>> loop of re-parameterization with less NDF for bad fits 8/1024...

         Re-optimizing parameterized candidate function 30/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/512...

         Re-optimizing parameterized candidate function 31/46...
             >>> loop of re-parameterization with less NDF for bad fits 7/1024...

         Re-optimizing parameterized candidate function 32/46...
             >>> loop of re-parameterization with less NDF for bad fits 5/512...

         Re-optimizing parameterized candidate function 33/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/512...

         Re-optimizing parameterized candidate function 34/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/512...

         Re-optimizing parameterized candidate function 35/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/512...

         Re-optimizing parameterized candidate function 36/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/512...

         Re-optimizing parameterized candidate function 37/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/1024...

         Re-optimizing parameterized candidate function 38/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/512...

         Re-optimizing parameterized candidate function 39/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/512...

         Re-optimizing parameterized candidate function 40/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/512...

         Re-optimizing parameterized candidate function 41/46...
             >>> loop of re-parameterization with less NDF for bad fits 8/1024...

         Re-optimizing parameterized candidate function 42/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/1024...

         Re-optimizing parameterized candidate function 43/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/2048...

         Re-optimizing parameterized candidate function 44/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/1024...

         Re-optimizing parameterized candidate function 45/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/2048...

         Re-optimizing parameterized candidate function 46/46...
             >>> loop of re-parameterization with less NDF for bad fits 1/2048...

.. container:: cell markdown
   :name: b23a91aa-2272-4b6d-8862-f0fa8fc96ae4

   .. rubric:: Save results to output files
      :name: save-results-to-output-files

.. container:: cell markdown
   :name: 75b09236-4174-4e45-812d-5646ee872729

   Save results to csv tables:

   - ``candidates.csv``: saves all candidate functions and evaluations
     in a csv table.
   - ``candidates_reduced.csv``: saves a reduced version for essential
     information without intermediate results.

.. container:: cell code
   :name: 014cd1d2-0b50-431d-9a47-3b356de10d14

   .. code:: python

      model.save_to_csv(output_dir = 'output_Toy_dataset_3c/')

   .. container:: output stream stdout

      ::

         Saving full results >>> output_Toy_dataset_3c/candidates.csv
         Saving reduced results >>> output_Toy_dataset_3c/candidates_reduced.csv

.. container:: cell markdown
   :name: 645acdb2-bee0-4394-98a5-5bc0d008baba

   Plot results to pdf files:

   - ``candidates.pdf``: plots all candidate functions for fit quality
     evaluation.
   - ``candidates_gof.pdf``: plots the goodness-of-fit scores.
   - ``candidates_correlation.pdf``: plots the correlation matrices for
     the parameters of the candidate functions.

.. container:: cell code
   :name: cd1b926b-6942-4e5c-8b32-1570be622800

   .. code:: python

      model.plot_to_pdf(
          	output_dir = 'output_Toy_dataset_3c/',
          	#bin_widths_1d = bin_widths_1d,
          	bin_edges_2d = bin_edges_2d,
          	plot_logy = False,
          	plot_logx = False,
              sampling_95quantile = False
      )

   .. container:: output stream stdout

      ::

         Plotting candidate functions 46/46 >>> output_Toy_dataset_3c/candidates.pdf
         Plotting correlation matrices 46/46 >>> output_Toy_dataset_3c/candidates_correlation.pdf
         Plotting goodness-of-fit scores >>> output_Toy_dataset_3c/candidates_gof.pdf

