.. container:: cell code
   :name: 2eb555c2-8163-4fe3-8546-3454b651e865

   .. code:: python

      from symbolfit.symbolfit import *

   .. container:: output stream stdout

      ::

         Detected IPython. Loading juliacall extension. See https://juliapy.github.io/PythonCall.jl/stable/compat/#IPython

.. container:: cell markdown
   :name: 66906c16-9eb8-43ff-aa4d-29a5ea50d033

   .. rubric:: Dataset
      :name: dataset

.. container:: cell markdown
   :name: 1bbc1b76-6d40-48d4-9dde-6cb56052d1e0

   Five inputs are needed, which can be python lists or numpy arrays
   (more options will be added in future!):

   #. ``x``: independent variable (bin center location).
   #. ``y``: dependent variable.
   #. ``y_up``: upward uncertainty in y per bin.
   #. ``y_down``: downward uncertainty in y per bin.
   #. ``bin_widths_1d`` bin widths in x.

   - Elements in both y_up and y_down should be non-negative values.
   - These values are the "delta" in y,

     - y + y_up = y shifted up by one standard deviation.
     - y - y_down = y shifted down by one standard deviation.

   - If no uncertainty in the dataset, one can set both y_up and y_down
     to ones with the same shape as x.

.. container:: cell code
   :name: 95ae43f4-d947-4c53-a133-73b163369e3d

   .. code:: python

      x = [12.5, 37.5, 62.5, 87.5, 112.5, 137.5, 162.5, 187.5, 212.5, 237.5, 262.5, 287.5, 312.5, 337.5, 362.5, 387.5, 412.5, 437.5, 462.5, 487.5]
      y = [10.234884262084961, 122.1119384765625, 338.9125061035156, 810.2549438476562, 649.0571899414062, 351.8170166015625, 248.619873046875, 186.88763427734375, 141.754150390625, 103.42931365966797, 78.36450958251953, 60.3994255065918, 49.005863189697266, 33.54744338989258, 27.76025390625, 25.299283981323242, 19.729631423950195, 14.033162117004395, 15.06820011138916, 9.641764640808105]
      y_up = [3.199200566092248, 11.050427072134475, 18.409576478113657, 28.464977495997715, 25.476600831771226, 18.756785881423355, 15.767684454189048, 13.670685216087149, 11.906055198537633, 10.170020337229811, 8.852373104570296, 7.771706730608908, 7.000418786736781, 5.7920154859852175, 5.268800044246317, 5.029839359395411, 4.441804973650936, 3.746086239931536, 3.8817779575072504, 3.105119102515732]
      y_down = [3.199200566092248, 11.050427072134475, 18.409576478113657, 28.464977495997715, 25.476600831771226, 18.756785881423355, 15.767684454189048, 13.670685216087149, 11.906055198537633, 10.170020337229811, 8.852373104570296, 7.771706730608908, 7.000418786736781, 5.7920154859852175, 5.268800044246317, 5.029839359395411, 4.441804973650936, 3.746086239931536, 3.8817779575072504, 3.105119102515732]
      bin_widths_1d = [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25]

.. container:: cell markdown
   :name: 2c819ddd-a45e-4bb9-915e-19718576b0eb

   Plot the dataset to see what we will be fitting to:

.. container:: cell code
   :name: ee24eb08-6d27-49ec-8221-383219ae5229

   .. code:: python

      fig, axes = plt.subplots(figsize = (6, 4))
      plt.errorbar(np.array(x).flatten(),
                   np.array(y).flatten(),
                   yerr = [np.array(y_down).flatten(), np.array(y_up).flatten()],
                   xerr = np.array(bin_widths_1d)/2,
                   fmt = '.', c = 'black', ecolor = 'grey', capsize = 0,
                  )

   .. container:: output execute_result

      ::

         <ErrorbarContainer object of 3 artists>

   .. container:: output display_data

      .. image:: img/toy1/dataset.png

.. container:: cell markdown
   :name: 8c27af64-6c06-40b7-97ca-8b55d8fab279

   .. rubric:: Configure the fit
      :name: configure-the-fit

.. container:: cell markdown
   :name: 28c4e18d-adc4-4f41-bace-96138f09a128

   Configure PySR to define the function space being searched for with
   symbolic regression:

.. container:: cell code
   :name: f3415459-b989-4cbe-8472-3fe2ae77f9be

   .. code:: python

      from pysr import PySRRegressor
      import sympy

      pysr_config = PySRRegressor(
          model_selection = 'accuracy',
          niterations = 200,
          maxsize = 60,
          binary_operators = [
              '+', '*'
                           ],
          unary_operators = [
              'exp',
              'gauss(x) = exp(-x*x)',
              'tanh',
          ],
          nested_constraints = {
              'tanh':   {'tanh': 0, 'exp': 0, 'gauss': 0, '*': 2},
              'exp':    {'tanh': 0, 'exp': 0, 'gauss': 0, '*': 2},
              'gauss':  {'tanh': 0, 'exp': 0, 'gauss': 0, '*': 2},
              '*':      {'tanh': 1, 'exp': 1, 'gauss': 1, '*': 2},
          },
          extra_sympy_mappings={
              'gauss': lambda x: sympy.exp(-x*x),
                               },
          loss='loss(y, y_pred, weights) = (y - y_pred)^2 * weights',
      )

.. container:: cell markdown
   :name: ed837443-a0fc-4227-9ea9-350c898a96b2

   Here, we allow two binary operators (+, \*) and three unary operators
   (exp, gauss, tanh) when searching for functional forms. The
   custom-defined gauss is there because this dataset has a peak. One
   can define any other function they want for their shapes.

   Nested constraints are imposed to prohibit, e.g., exp(exp(x))...

   Loss function is a weighted MSE, where the weight is the sqaured
   uncertainty by default in SymbolFit.

   For PySR options, please see:

   - https://github.com/MilesCranmer/PySR
   - https://astroautomata.com/PySR/

.. container:: cell markdown
   :name: c904493f-a36c-4b84-bc09-5fdad6e0f6d3

   Configure SymbolFit with the PySR config and for the re-optimization
   process:

.. container:: cell code
   :name: a61d9307-8b17-42dc-9915-3a4d0f7d1c51

   .. code:: python

      model = SymbolFit(
              # Dataset: x, y, y_up, y_down.
          	x = x,
          	y = y,
          	y_up = y_up,
          	y_down = y_down,
          
              # PySR configuration of the function space.
          	pysr_config = pysr_config,
          
              # Constrain the maximum function size and over-write maxsize in pysr_config.
              # Set a higher value for more complex shape, or when the lower one does not fit well.
          	max_complexity = 60,
          
              # Whether to scale input x to be within 0 and 1 for the fits for numerical stability,
              # as large x could lead to overflow when there is e.g. exp(x) -> exp(10000).
              # So set this to False when your x's are or close to O(1), otherwise recommended to set True.
              # After the fits, the functions will be unscaled to relect the original dataset.
          	input_rescale = True,
          
              # Whether to scale y for the fits for numerical stability,
              # options are (when input_rescale is True): None / 'mean' / 'max' / 'l2'.
              # This is useful to stabilize fits when your y's are very large or very small.
              # After the fits, the functions will be unscaled to relect the original dataset.
          	scale_y_by = 'mean',
          
              # Set a maximum standard error (%) for all parameters to avoid bad fits during re-optimization.
              # In the refit loop, when any of the parameters returns a standard error larger than max_stderr,
              # the fit is considered failed, and the fit will retry itself for fewer or other combination of varying parameters,
              # by freezing some of the parameters to their initial values and kept fixed during re-optimization.
              # This is to avoid bad fits when the objective is too complex to minimize, which could cause some parameters
              # to have unrealistically large standard errors.
              # In most cases 10 < max_stderr < 100 suffices.
          	max_stderr = 20,
          
              # Consider y_up and y_down to weight the MSE loss during SR search and re-optimization.
          	fit_y_unc = True,
          
              # Set a random seed for returning the same batch of functional forms every time (single-threaded),
              # otherwise set None to explore more functions every time (multi-threaded and faster).
              # In most cases the function space is huge, one can retry the fits with the exact same fit configuration
              # and get completely different sets of candidate functions, merely by using different random seeds.
              # So if the candidate functions are not satisfactory this time, rerun it few times more with
              # random_seed = None or a different seed each time.
          	random_seed = None,
          
              # Custome loss weight to set "(y - y_pred)^2 * loss_weights", overwriting that with y_up and y_down.
          	loss_weights = None
      )

.. container:: cell markdown
   :name: 150c9085-9eea-4fe4-9b3c-3ab1b2d727f9

   .. rubric:: Symbol Fit it!
      :name: symbol-fit-it

.. container:: cell markdown
   :name: 31867aec-575b-40fe-aa4f-7e4b6ebeffc3

   Run the fits: SR fit for functional form searching ->
   parameterization -> re-optimization fit for improved best-fits and
   uncertainty estimation -> evaluation.

.. container:: cell code
   :name: 473996da-005b-451c-a452-c1449fa8ca04

   .. code:: python

      model.fit()

   .. container:: output stream stdout

      ::

         Compiling Julia backend...

   .. container:: output stream stderr

      ::

         [ Info: Started!

   .. container:: output stream stdout

      ::


         Expressions evaluated per second: 4.830e+05
         Head worker occupation: 14.4%
         Progress: 1066 / 3000 total iterations (35.533%)
         ====================================================================================================
         Hall of Fame:
         ---------------------------------------------------------------------------------------------------
         Complexity  Loss       Score     Equation
         1           1.748e-01  1.594e+01  y = 0.10214
         2           1.639e-01  6.432e-02  y = tanh(0.2065)
         3           1.639e-01  5.144e-05  y = 3.4824 * 0.059303
         4           1.501e-01  8.762e-02  y = gauss(x₀) * 0.34078
         5           1.500e-01  6.142e-04  y = gauss(x₀) * tanh(0.41664)
         6           1.482e-01  1.198e-02  y = gauss(x₀ * x₀) * 0.34078
         7           1.461e-01  1.444e-02  y = 0.41994 + (-0.37271 * (x₀ * x₀))
         8           1.234e-01  1.687e-01  y = (gauss(x₀ * 3.0543) * x₀) * 4.6521
         9           1.180e-01  4.505e-02  y = 3.8278 * (tanh(x₀) * gauss(x₀ * -2.5601))
         10          3.624e-02  1.181e+00  y = 3.4712 * (0.037876 + gauss(8.4948 * (x₀ + -0.20962)))
         11          2.915e-02  2.176e-01  y = (tanh(6.202 * x₀) * gauss(2.7425 * x₀)) * 4.0995
         12          2.358e-02  2.120e-01  y = (4.82 * ((4.82 * x₀) * gauss(x₀ * 3.6962))) + 0.10084
         13          2.320e-02  1.645e-02  y = ((tanh(4.8622 * x₀) * gauss(x₀ * 3.0964)) * 5.0044) + 0.08...
                                           9267
         15          2.051e-02  6.158e-02  y = 3.569 * (tanh(x₀ * 6.4948) * (0.034946 + gauss(4.4225 * (-...
                                           0.1345 + x₀))))
         17          5.482e-03  6.597e-01  y = (3.7386 * ((gauss(x₀ * 2.2021) * x₀) + gauss((x₀ + -0.1818...
                                           3) * -10.811))) + 0.0083632
         18          5.474e-03  1.392e-03  y = gauss(-2.1139) + (((gauss(2.2405 * x₀) * x₀) + gauss((-0.1...
                                           8179 + x₀) * 10.695)) * 3.7942)
         19          5.199e-03  5.167e-02  y = (3.7942 * (gauss((x₀ + -0.18179) * -10.733) + (gauss(x₀ * ...
                                           2.2405) * x₀))) + (0.032147 * x₀)
         20          5.199e-03  8.047e-06  y = (3.7942 * (gauss((x₀ + -0.18179) * -10.733) + (gauss(x₀ * ...
                                           2.2405) * x₀))) + (tanh(0.032147) * x₀)
         21          2.821e-03  6.113e-01  y = (((gauss(x₀ + (x₀ + x₀)) * (x₀ + x₀)) + gauss((-0.17684 + ...
                                           x₀) * 14.233)) * 4.0067) + 0.09679
         22          2.819e-03  6.016e-04  y = (((gauss(x₀ + (x₀ + x₀)) * (x₀ + x₀)) + gauss((-0.17684 + ...
                                           x₀) * 14.233)) * 4.0067) + tanh(0.09679)
         23          1.471e-03  6.507e-01  y = 0.080227 + (3.3081 * (gauss(14.304 * (-0.17508 + x₀)) + ((...
                                           x₀ + (x₀ + x₀)) * gauss(x₀ + (x₀ + x₀)))))
         24          1.471e-03  1.526e-05  y = tanh(0.080227) + ((gauss(14.304 * (-0.17508 + x₀)) + (((x₀...
                                            + x₀) + x₀) * gauss(x₀ + (x₀ + x₀)))) * 3.3081)
         25          1.237e-03  1.734e-01  y = (0.094791 + (4.1287 * (gauss(-15.598 * (x₀ + -0.17408)) + ...
                                           (((x₀ + x₀) + x₀) * gauss(x₀ + (x₀ + x₀)))))) * 0.8343
         26          1.184e-03  4.348e-02  y = (0.096207 + (4.1295 * (gauss(-15.598 * (x₀ + -0.17419)) + ...
                                           (((x₀ + x₀) + tanh(x₀)) * gauss(x₀ + (x₀ + x₀)))))) * 0.83859
         28          1.178e-03  2.346e-03  y = (0.094418 + (4.1438 * (gauss((x₀ + -0.17323) * 16.551) + (...
                                           gauss(x₀ + (x₀ + (x₀ + 0.043129))) * (tanh(x₀) + (x₀ + x₀)))))...
                                           ) * 0.90499
         29          1.171e-03  6.285e-03  y = (0.094418 + (4.1438 * (gauss((x₀ + -0.17323) * (16.551 + 0...
                                           .54622)) + (gauss(x₀ + (x₀ + (x₀ + 0.043129))) * (x₀ + (x₀ + x...
                                           ₀)))))) * 0.90499
         30          1.037e-03  1.217e-01  y = gauss(1.5542) + (4.907 * (tanh(x₀ * 4.9067) * ((gauss(x₀ +...
                                            ((x₀ + -0.23867) + x₀)) * gauss(0.84995)) + gauss((-0.16551 +...
                                            x₀) * (-13.586 + -1.646)))))
         32          9.891e-04  2.359e-02  y = gauss(1.5542) + (4.907 * (tanh(x₀ * 4.9067) * (gauss((-0.1...
                                           6551 + x₀) * ((-13.586 + -2.4174) + x₀)) + (gauss(0.84995) * g...
                                           auss(x₀ + ((x₀ + -0.23867) + x₀))))))
         34          9.417e-04  2.457e-02  y = gauss(1.5542) + (4.907 * (tanh((4.9067 + x₀) * x₀) * ((gau...
                                           ss(x₀ + ((x₀ + -0.23867) + x₀)) * gauss(0.84995)) + gauss((-0....
                                           16551 + x₀) * ((-13.586 + x₀) + -2.4077)))))
         35          9.109e-04  3.326e-02  y = tanh(0.065422) + ((((0.54258 * gauss(x₀ + x₀)) + gauss((-0...
                                           .17082 + x₀) * -15.686)) * (tanh(x₀ * 5.7373) + x₀)) * ((5.741...
                                           8 * (0.5105 * gauss(x₀ + x₀))) + gauss(x₀)))
         36          8.562e-04  6.194e-02  y = tanh(0.065422) + ((((0.54258 * gauss(x₀ + x₀)) + gauss((-0...
                                           .17082 + x₀) * -15.686)) * (tanh(x₀ * 5.7373) + tanh(x₀))) * (...
                                           (5.7418 * (0.5105 * gauss(x₀ + x₀))) + gauss(x₀)))
         37          8.118e-04  5.319e-02  y = 0.065917 + (((tanh(5.7355 * x₀) + x₀) * ((gauss(x₀ + x₀) *...
                                            tanh(0.52996)) + gauss((x₀ + -0.16954) * -15.69))) * (gauss(x...
                                           ₀) + ((0.52996 * gauss(x₀ + x₀)) * (5.7438 + x₀))))
         38          8.112e-04  7.508e-04  y = 0.065917 + (((tanh(5.7355 * x₀) + x₀) * ((gauss(x₀ + x₀) *...
                                            tanh(0.52996)) + gauss((x₀ + -0.16954) * -15.69))) * (gauss(x...
                                           ₀) + ((0.52996 * gauss(x₀ + x₀)) * (5.7438 + tanh(x₀)))))
         39          7.987e-04  1.549e-02  y = 0.065185 + ((((0.50561 * gauss(x₀ + x₀)) + gauss((-0.17019...
                                            + x₀) * ((-15.689 + x₀) + -0.44815))) * (tanh(x₀) + tanh(x₀ *...
                                            5.7349))) * ((5.7449 * (0.54246 * gauss(x₀ + x₀))) + gauss(x₀...
                                           )))
         40          7.863e-04  1.563e-02  y = 0.065185 + ((((0.50561 * gauss(x₀ + x₀)) + gauss((-0.17019...
                                            + x₀) * ((-15.689 + (-0.50186 + x₀)) + -0.44815))) * (x₀ + ta...
                                           nh(x₀ * 5.7349))) * ((5.7449 * (0.54246 * gauss(x₀ + x₀))) + g...
                                           auss(x₀)))
         41          7.838e-04  3.226e-03  y = 0.065185 + ((((0.50561 * gauss(x₀ + x₀)) + gauss((-0.17019...
                                            + x₀) * ((-15.689 + x₀) + (-0.44815 + x₀)))) * (tanh(x₀) + ta...
                                           nh(x₀ * 5.7349))) * ((5.7449 * (0.54246 * gauss(x₀ + x₀))) + g...
                                           auss(x₀)))
         42          7.475e-04  4.744e-02  y = 0.065185 + (((gauss((-0.17019 + x₀) * ((((-1.4103 + -15.68...
                                           9) + x₀) + x₀) + x₀)) + (0.50561 * gauss(x₀ + x₀))) * (x₀ + ta...
                                           nh(x₀ * 5.7349))) * (gauss(x₀) + (5.7449 * (0.54246 * gauss(x₀...
                                            + x₀)))))
         43          6.099e-04  2.034e-01  y = ((x₀ + (((5.7531 + 0.31848) * (tanh(x₀ + 0.72973) * gauss(...
                                           x₀ + x₀))) + 0.44725)) * (tanh(x₀ * 5.7248) * (gauss(((x₀ + -1...
                                           5.697) + x₀) * (-0.16919 + x₀)) + (gauss(x₀ + x₀) * tanh(0.571...
                                           85))))) + 0.056465
         50          5.639e-04  1.121e-02  y = ((x₀ + (((5.7336 + gauss(x₀)) * (tanh(x₀ + 0.61081) * gaus...
                                           s(x₀ + x₀))) + 0.43255)) * (tanh(x₀ * 5.7068) * (gauss((((x₀ +...
                                            -15.698) + (-1.2671 + (x₀ + x₀))) + x₀) * (-0.16877 + x₀)) + ...
                                           (gauss(x₀ + x₀) * tanh(0.58526))))) + 0.058841
         53          5.412e-04  1.370e-02  y = ((x₀ + (((5.7336 + gauss(x₀)) * (tanh(x₀ + 0.61081) * gaus...
                                           s(x₀ + x₀))) + tanh(0.43255))) * (tanh(x₀ * 5.7068) * (gauss((...
                                           ((x₀ + -15.698) + (0.99951 + ((x₀ + x₀) + -1.9602))) + x₀) * (...
                                           -0.16877 + x₀)) + (gauss(x₀ + x₀) * tanh(0.58526))))) + 0.0588...
                                           41
         55          5.264e-04  1.380e-02  y = ((x₀ + (((5.7336 + gauss(x₀)) * (tanh(x₀ + 0.61081) * gaus...
                                           s(x₀ + x₀))) + tanh(0.43255))) * (tanh(x₀ * 5.7068) * (gauss((...
                                           ((x₀ + -15.698) + ((0.99951 + ((x₀ + x₀) + -1.9602)) + x₀)) + ...
                                           x₀) * (-0.16877 + x₀)) + (gauss(x₀ + x₀) * tanh(0.58526))))) +...
                                            0.058841
         57          5.057e-04  2.013e-02  y = ((x₀ + (((5.7336 + gauss(x₀ * (x₀ + 1.1457))) * (tanh(x₀ +...
                                            0.61081) * gauss(x₀ + x₀))) + tanh(0.43255))) * (tanh(x₀ * 5....
                                           7068) * (gauss((((x₀ + -15.698) + (0.99951 + ((x₀ + x₀) + -1.9...
                                           602))) + x₀) * (-0.16877 + x₀)) + (gauss(x₀ + x₀) * tanh(0.585...
                                           26))))) + 0.058841
         59          5.026e-04  3.030e-03  y = ((x₀ + (((5.7336 + gauss(x₀ * (x₀ + 1.1457))) * (tanh(x₀ +...
                                            0.61081) * gauss(x₀ + x₀))) + tanh(0.43255))) * (tanh(x₀ * 5....
                                           7068) * (gauss(((((x₀ + 0.048031) + -15.698) + (0.99951 + ((x₀...
                                            + x₀) + -1.9602))) + x₀) * (-0.16877 + x₀)) + (gauss(x₀ + x₀)...
                                            * tanh(0.58526))))) + 0.058841
         60          4.928e-04  1.981e-02  y = ((x₀ + (((5.7373 + gauss(x₀ + x₀)) * (tanh(x₀ + 0.62202) *...
                                            gauss(x₀ + x₀))) + 0.43156)) * (tanh(x₀ * 5.7041) * (gauss(((...
                                           (((x₀ + 0.13048) + -15.703) + (0.99375 + ((x₀ + (x₀ + 0.07904)...
                                           ) + -1.966))) + x₀) + x₀) * (-0.16856 + x₀)) + (gauss(x₀ + x₀)...
                                            * tanh(0.58276))))) + 0.059135
         ---------------------------------------------------------------------------------------------------
         ====================================================================================================
         Press 'q' and then <enter> to stop execution early.

         Expressions evaluated per second: 4.820e+05
         Head worker occupation: 15.8%
         Progress: 2193 / 3000 total iterations (73.100%)
         ====================================================================================================
         Hall of Fame:
         ---------------------------------------------------------------------------------------------------
         Complexity  Loss       Score     Equation
         1           1.748e-01  1.594e+01  y = 0.10214
         2           1.639e-01  6.432e-02  y = tanh(0.2065)
         3           1.639e-01  5.144e-05  y = 3.4824 * 0.059303
         4           1.501e-01  8.762e-02  y = gauss(x₀) * 0.34078
         5           1.500e-01  6.142e-04  y = gauss(x₀) * tanh(0.41664)
         6           1.482e-01  1.198e-02  y = gauss(x₀ * x₀) * 0.34078
         7           1.461e-01  1.444e-02  y = 0.41994 + (-0.37271 * (x₀ * x₀))
         8           1.127e-01  2.594e-01  y = 0.14061 + gauss(-10.335 * (x₀ + -0.19303))
         9           1.106e-01  1.877e-02  y = gauss(-10.329 * (x₀ + -0.18764)) + exp(-1.7161)
         10          3.294e-02  1.212e+00  y = 0.13788 + (4.3084 * gauss((x₀ + -0.19421) * -10.29))
         11          2.915e-02  1.222e-01  y = (tanh(6.202 * x₀) * gauss(2.7425 * x₀)) * 4.0995
         12          2.345e-02  2.175e-01  y = ((gauss(3.7432 * x₀) * (x₀ * 4.8292)) * 4.8292) + 0.10146
         13          2.099e-02  1.110e-01  y = (exp(5.7457) * ((x₀ * x₀) * gauss(-5.5542 * x₀))) + 0.1313...
                                           3
         14          1.987e-02  5.466e-02  y = (exp(5.669) * (gauss(x₀ * -5.3265) * (x₀ * x₀))) + exp(-2....
                                           0499)
         17          4.559e-03  4.907e-01  y = 0.036491 + ((gauss(11.8 * (-0.17977 + x₀)) + (gauss(x₀ * -...
                                           2.3181) * x₀)) * 4.0432)
         19          1.179e-03  6.762e-01  y = 0.08435 + ((gauss(-16.67 * (-0.17411 + x₀)) + ((x₀ * 3.035...
                                           2) * gauss(3.0556 * x₀))) * 3.5533)
         20          1.062e-03  1.049e-01  y = (((tanh(x₀ * 2.935) * gauss(-2.7183 * x₀)) + gauss((x₀ + -...
                                           0.1746) * 15.591)) * 3.524) + 0.08255
         22          9.079e-04  7.826e-02  y = (((tanh(x₀ * 3.524) * gauss(-2.7183 * x₀)) + gauss((15.591...
                                            + 1.7559) * (x₀ + -0.1746))) * 3.524) + 0.08255
         24          8.961e-04  6.526e-03  y = (((tanh((x₀ * 3.524) + -0.00049688) * gauss(-2.7183 * x₀))...
                                            + gauss((15.591 + 1.7559) * (x₀ + -0.1746))) * 3.524) + 0.082...
                                           55
         28          8.900e-04  1.707e-03  y = (((3.5646 * 0.71007) + gauss(x₀)) * ((tanh(3.5646 * x₀) * ...
                                           gauss(x₀ * 2.683)) + gauss((x₀ + -0.17406) * (16.073 + 1.4254)...
                                           ))) + tanh(0.08185)
         30          8.862e-04  2.126e-03  y = (((3.5646 * 0.71007) + gauss(x₀)) * ((tanh((3.5646 + 0.037...
                                           974) * x₀) * gauss(x₀ * 2.683)) + gauss((x₀ + -0.17406) * (16....
                                           073 + 1.4254)))) + tanh(0.08185)
         32          8.717e-04  8.286e-03  y = (0.050889 + ((gauss((x₀ + -0.17499) * 15.592) + (tanh(x₀ +...
                                            (x₀ + x₀)) * gauss(x₀ * -2.6993))) * 3.551)) + (0.093075 * (t...
                                           anh(x₀) * (gauss(x₀) * 0.99453)))
         34          7.732e-04  5.996e-02  y = (0.83524 * (0.088231 + (4.1291 * (gauss(15.63 * (x₀ + -0.1...
                                           7396)) + ((tanh(x₀ + x₀) + x₀) * gauss((x₀ + x₀) + x₀)))))) + ...
                                           ((x₀ + -0.93998) * (-0.24615 * x₀))
         36          7.451e-04  1.848e-02  y = (0.83524 * (0.088231 + (4.1291 * (gauss(15.63 * (x₀ + -0.1...
                                           7396)) + ((tanh(x₀ + x₀) + x₀) * gauss((x₀ + x₀) + x₀)))))) + ...
                                           (((x₀ + -0.93998) * x₀) * (-0.24615 + -0.02643))
         38          7.142e-04  2.122e-02  y = (0.83524 * (0.088231 + (4.1291 * (gauss(15.63 * (x₀ + -0.1...
                                           7396)) + ((tanh(x₀) + tanh(x₀ + x₀)) * gauss((x₀ + x₀) + x₀)))...
                                           ))) + (((x₀ + -0.93998) * tanh(x₀)) * (-0.24615 + -0.15197))
         39          7.100e-04  5.856e-03  y = (0.83524 * (0.088231 + (4.1291 * (gauss(15.63 * (x₀ + -0.1...
                                           7396)) + ((tanh(x₀) + tanh(x₀ + x₀)) * gauss((x₀ + x₀) + x₀)))...
                                           ))) + ((((x₀ * x₀) + -0.93998) * tanh(-0.24615)) * tanh(x₀))
         40          5.922e-04  1.814e-01  y = tanh(0.070245) + ((((gauss(x₀ + x₀) * tanh((0.61292 + x₀) ...
                                           + x₀)) * 5.7193) + gauss(0.59099)) * (tanh(x₀ * 5.6934) * (gau...
                                           ss((-15.71 + -0.17066) * (-0.16842 + x₀)) + (0.53375 * gauss(x...
                                           ₀ + x₀)))))
         41          5.320e-04  1.072e-01  y = ((x₀ + (5.7258 * (tanh(((0.63913 + x₀) + x₀) + x₀) * gauss...
                                           (x₀ + x₀)))) * (tanh(x₀ * (5.6992 + x₀)) * ((gauss(x₀ + x₀) * ...
                                           tanh(0.61168)) + gauss(-15.706 * (-0.16664 + x₀))))) + 0.06805...
                                           4
         43          5.095e-04  2.159e-02  y = ((x₀ + (5.7258 * (tanh(((0.63913 + x₀) + x₀) + x₀) * gauss...
                                           (x₀ + x₀)))) * (tanh(x₀ * ((x₀ + 5.6992) + x₀)) * ((gauss(x₀ +...
                                            x₀) * tanh(0.61168)) + gauss(-15.706 * (-0.16664 + x₀))))) + ...
                                           0.068054
         44          5.094e-04  1.919e-04  y = ((x₀ + (5.7258 * (tanh(((0.63913 + x₀) + x₀) + x₀) * gauss...
                                           (x₀ + x₀)))) * (tanh(x₀ * ((x₀ + 5.6992) + x₀)) * ((gauss(x₀ +...
                                            x₀) * tanh(0.61168)) + gauss(-15.706 * (-0.16664 + x₀))))) + ...
                                           tanh(0.068054)
         45          5.082e-04  2.407e-03  y = ((x₀ + (5.7258 * (tanh((((0.63913 + x₀) + x₀) + x₀) + -0.0...
                                           16316) * gauss(x₀ + x₀)))) * (tanh(x₀ * ((x₀ + 5.6992) + x₀)) ...
                                           * ((gauss(x₀ + x₀) * tanh(0.61168)) + gauss(-15.706 * (-0.1666...
                                           4 + x₀))))) + 0.068054
         47          4.561e-04  5.410e-02  y = ((tanh(-0.081224) * exp(x₀)) + (((gauss(x₀) * x₀) * gauss(...
                                           -1.0435)) + ((((gauss(-0.75595) * gauss(x₀ + ((-0.13377 + x₀) ...
                                           + x₀))) + gauss((-0.16835 + x₀) * (((-13.579 + -1.9426) + -1.9...
                                           426) + x₀))) * tanh(4.9392 * x₀)) * 4.9443))) + 0.1497
         48          4.139e-04  9.712e-02  y = ((((x₀ * gauss(x₀)) * exp(-1.0435)) + ((((gauss(-0.75434) ...
                                           * gauss(x₀ + ((-0.13377 + x₀) + x₀))) + gauss((-0.16835 + x₀) ...
                                           * (((-13.579 + (x₀ + x₀)) + -3.022) + -1.1813))) * tanh(4.9392...
                                            * x₀)) * 4.9443)) + (-0.081224 * exp(x₀))) + 0.1497
         50          4.075e-04  7.755e-03  y = ((((x₀ * gauss(x₀)) * exp(-1.0435)) + ((((gauss(-0.75434) ...
                                           * gauss(x₀ + ((-0.13377 + x₀) + x₀))) + gauss((-0.16835 + x₀) ...
                                           * (((-13.579 + (x₀ + (x₀ + x₀))) + -3.022) + -1.1813))) * tanh...
                                           (4.9392 * x₀)) * 4.9443)) + (-0.081224 * exp(x₀))) + 0.1497
         51          4.043e-04  7.815e-03  y = ((((((gauss(-0.75434) * gauss(x₀ + ((x₀ + -0.13377) + x₀))...
                                           ) + gauss((x₀ + -0.16835) * ((((-13.579 + -1.1813) + (x₀ + -3....
                                           022)) + x₀) + x₀))) * tanh(4.9392 * x₀)) * 4.9443) + ((x₀ * ga...
                                           uss(x₀)) * exp(-1.0435))) + (-0.081224 * exp(x₀))) + tanh(0.14...
                                           97)
         52          4.025e-04  4.483e-03  y = ((((x₀ * gauss(x₀)) * exp(-1.0435)) + ((((gauss(-0.75434) ...
                                           * gauss(x₀ + ((-0.13377 + x₀) + x₀))) + gauss((-0.16835 + x₀) ...
                                           * (((-13.579 + x₀) + ((x₀ + -0.18469) + (-1.1748 + x₀))) + -3....
                                           022))) * tanh(4.9392 * x₀)) * 4.9443)) + (-0.081224 * exp(x₀))...
                                           ) + 0.1497
         53          3.935e-04  2.269e-02  y = ((-0.081224 * exp(x₀)) + (((((gauss(-0.78289) * gauss(x₀ +...
                                            ((x₀ + -0.13377) + x₀))) + gauss((x₀ + -0.16835) * ((((-13.57...
                                           9 + -1.1813) + (x₀ + -3.022)) + (x₀ + x₀)) + x₀))) * tanh(4.93...
                                           92 * x₀)) * 4.9443) + (exp(-1.0435) * (x₀ * gauss(x₀))))) + ta...
                                           nh(0.1497)
         54          3.867e-04  1.750e-02  y = ((((x₀ * gauss(x₀)) * exp(-1.0323)) + ((((gauss(-0.82625) ...
                                           * gauss(x₀ + ((-0.18529 + x₀) + x₀))) + gauss((-0.1669 + x₀) *...
                                            ((((-13.584 + (-0.65362 + (x₀ + x₀))) + -0.92136) + -0.045772...
                                           ) + -1.1869))) * tanh(4.9215 * x₀)) * 4.9249)) + (-0.050388 * ...
                                           (exp(x₀) + x₀))) + 0.11719
         55          3.689e-04  4.713e-02  y = ((-0.081224 * exp(x₀)) + (((((gauss(-0.78289) * gauss(x₀ +...
                                            ((x₀ + -0.13377) + x₀))) + gauss((x₀ + -0.16835) * ((((-13.57...
                                           9 + -1.1813) + (x₀ + -3.022)) + ((x₀ + x₀) + x₀)) + x₀))) * ta...
                                           nh(4.9392 * x₀)) * 4.9443) + (exp(-1.0435) * (x₀ * gauss(x₀)))...
                                           )) + tanh(0.1497)
         ---------------------------------------------------------------------------------------------------
         ====================================================================================================
         Press 'q' and then <enter> to stop execution early.


         Checking if pysr_model_temp.pkl exists...
         Loading model from pysr_model_temp.pkl


         Re-optimizing parameterized candidate function 1/40...
         Re-optimizing parameterized candidate function 2/40...bad fits 2/2...
         Re-optimizing parameterized candidate function 3/40...bad fits 2/2...
         Re-optimizing parameterized candidate function 4/40...bad fits 2/2...
         Re-optimizing parameterized candidate function 5/40...bad fits 2/2...
         Re-optimizing parameterized candidate function 6/40...bad fits 2/2...
         Re-optimizing parameterized candidate function 7/40...bad fits 2/2...
         Re-optimizing parameterized candidate function 8/40...bad fits 4/4...
             >>> loop of re-parameterization with less NDF for bad fits 7/8...

         Re-optimizing parameterized candidate function 9/40...
             >>> loop of re-parameterization with less NDF for bad fits 7/8...

         Re-optimizing parameterized candidate function 10/40...
             >>> loop of re-parameterization with less NDF for bad fits 3/16...

         Re-optimizing parameterized candidate function 11/40...
             >>> loop of re-parameterization with less NDF for bad fits 3/8...

         Re-optimizing parameterized candidate function 12/40...
             >>> loop of re-parameterization with less NDF for bad fits 2/8...

         Re-optimizing parameterized candidate function 13/40...
             >>> loop of re-parameterization with less NDF for bad fits 3/8...

         Re-optimizing parameterized candidate function 14/40...
             >>> loop of re-parameterization with less NDF for bad fits 3/8...

         Re-optimizing parameterized candidate function 15/40...
             >>> loop of re-parameterization with less NDF for bad fits 3/8...

         Re-optimizing parameterized candidate function 16/40...
             >>> loop of re-parameterization with less NDF for bad fits 3/8...

         Re-optimizing parameterized candidate function 17/40...
             >>> loop of re-parameterization with less NDF for bad fits 3/32...

         Re-optimizing parameterized candidate function 18/40...
             >>> loop of re-parameterization with less NDF for bad fits 1/64...

         Re-optimizing parameterized candidate function 19/40...
             >>> loop of re-parameterization with less NDF for bad fits 1/32...

         Re-optimizing parameterized candidate function 20/40...
             >>> loop of re-parameterization with less NDF for bad fits 1/64...

         Re-optimizing parameterized candidate function 21/40...
             >>> loop of re-parameterization with less NDF for bad fits 1/64...

         Re-optimizing parameterized candidate function 22/40...
             >>> loop of re-parameterization with less NDF for bad fits 1/32...

         Re-optimizing parameterized candidate function 23/40...
             >>> loop of re-parameterization with less NDF for bad fits 1/32...

         Re-optimizing parameterized candidate function 24/40...
             >>> loop of re-parameterization with less NDF for bad fits 2/128...

         Re-optimizing parameterized candidate function 25/40...
             >>> loop of re-parameterization with less NDF for bad fits 2/128...

         Re-optimizing parameterized candidate function 26/40...
             >>> loop of re-parameterization with less NDF for bad fits 2/128...

         Re-optimizing parameterized candidate function 27/40...
             >>> loop of re-parameterization with less NDF for bad fits 2/128...

         Re-optimizing parameterized candidate function 28/40...
             >>> loop of re-parameterization with less NDF for bad fits 1/64...

         Re-optimizing parameterized candidate function 29/40...
             >>> loop of re-parameterization with less NDF for bad fits 1/32...

         Re-optimizing parameterized candidate function 30/40...
             >>> loop of re-parameterization with less NDF for bad fits 1/32...

         Re-optimizing parameterized candidate function 31/40...
             >>> loop of re-parameterization with less NDF for bad fits 1/32...

         Re-optimizing parameterized candidate function 32/40...
             >>> loop of re-parameterization with less NDF for bad fits 4/64...

         Re-optimizing parameterized candidate function 33/40...
             >>> loop of re-parameterization with less NDF for bad fits 4/128...

         Re-optimizing parameterized candidate function 34/40...
             >>> loop of re-parameterization with less NDF for bad fits 15/256...

         Re-optimizing parameterized candidate function 35/40...
             >>> loop of re-parameterization with less NDF for bad fits 15/256...

         Re-optimizing parameterized candidate function 36/40...
             >>> loop of re-parameterization with less NDF for bad fits 15/256...

         Re-optimizing parameterized candidate function 37/40...
             >>> loop of re-parameterization with less NDF for bad fits 15/256...

         Re-optimizing parameterized candidate function 38/40...
             >>> loop of re-parameterization with less NDF for bad fits 15/256...

         Re-optimizing parameterized candidate function 39/40...
             >>> loop of re-parameterization with less NDF for bad fits 12/256...

         Re-optimizing parameterized candidate function 40/40...
             >>> loop of re-parameterization with less NDF for bad fits 12/256...

.. container:: cell markdown
   :name: b23a91aa-2272-4b6d-8862-f0fa8fc96ae4

   .. rubric:: Save results to output files
      :name: save-results-to-output-files

.. container:: cell markdown
   :name: 75b09236-4174-4e45-812d-5646ee872729

   Save results to csv tables:

   - ``candidates.csv``: saves all candidate functions and evaluations
     in a csv table.
   - ``candidates_reduced.csv``: saves a reduced version for essential
     information without intermediate results.

.. container:: cell code
   :name: 014cd1d2-0b50-431d-9a47-3b356de10d14

   .. code:: python

      model.save_to_csv(output_dir = 'output_Toy_dataset_1/')

   .. container:: output stream stdout

      ::

         Saving full results >>> output_Toy_dataset_1/candidates.csv
         Saving reduced results >>> output_Toy_dataset_1/candidates_reduced.csv

.. container:: cell markdown
   :name: 645acdb2-bee0-4394-98a5-5bc0d008baba

   Plot results to pdf files:

   - ``candidates.pdf``: plots all candidate functions with associated
     uncertainties one by one for fit quality evaluation.
   - ``candidates_sampling.pdf``: plots all candidate functions with
     total uncertainty coverage generated by sampling parameters.
   - ``candidates_gof.pdf``: plots the goodness-of-fit scores.
   - ``candidates_correlation.pdf``: plots the correlation matrices for
     the parameters of the candidate functions.

.. container:: cell code
   :name: cd1b926b-6942-4e5c-8b32-1570be622800

   .. code:: python

      model.plot_to_pdf(
          	output_dir = 'output_Toy_dataset_1/',
          	bin_widths_1d = bin_widths_1d,
          	#bin_edges_2d = bin_edges_2d,
          	plot_logy = False,
          	plot_logx = False,
              sampling_95quantile = False
      )

   .. container:: output stream stdout

      ::

         Plotting candidate functions 40/40 >>> output_Toy_dataset_1/candidates.pdf
         Plotting candidate functions (sampling parameters) 40/40 >>> output_Toy_dataset_1/candidates_sampling.pdf
         Plotting correlation matrices 40/40 >>> output_Toy_dataset_1/candidates_correlation.pdf
         Plotting goodness-of-fit scores >>> output_Toy_dataset_1/candidates_gof.pdf

.. container:: cell code
   :name: e6288568-e52b-42e4-919a-090640ef9565

   .. code:: python

.. |image1| image:: da96ce66b8e0218ee985585059c08bd8ab8b85a7.png
